<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Free Hacking</title>
    <link>http://zhash.github.io/</link>
    <description>Recent content on Free Hacking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016, Merty; all rights reserved.</copyright>
    <lastBuildDate>Fri, 25 Mar 2016 14:11:11 +0800</lastBuildDate>
    <atom:link href="http://zhash.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>用VBA编写拥抱变化的代码(一)</title>
      <link>http://zhash.github.io/post/embrace-change-with-vba-01/</link>
      <pubDate>Fri, 25 Mar 2016 14:11:11 +0800</pubDate>
      
      <guid>http://zhash.github.io/post/embrace-change-with-vba-01/</guid>
      <description>

&lt;h1 id=&#34;embrace-change:e51d929b0160f65eb1da435a8f9e8108&#34;&gt;Embrace Change&lt;/h1&gt;

&lt;p&gt;毫无疑问,这样的标题出来,应该是基于类的,在个人认为基于模块的VBA代码,
就好象一个毫无基础的人,直接打开EXCEL在电子表格里乱图乱画一样(说这样
的话会不会被人拍砖？一家之言,不必当真哈),当然每个写VBA代码的人都是
这样过来的,我只在指出一条另外的路径供大家参考.同时唠叨一句,VBA的功
能还是很强大的,当然其性能有天然的缺点,但我们又不是用它来发射火箭,够用了.&lt;/p&gt;

&lt;p&gt;先看一个小例子:长方体的类Cuboid&lt;/p&gt;

&lt;p&gt;属性:底面积 高
    private are
    private hig&lt;/p&gt;

&lt;p&gt;方法:求体积与初始化方法
    Function volume()
        volume = are * hig
    End Function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Function init(area, high)
    are = area
    hig = high
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是一个小巧的类,但有一些隐患在其中,我们是认为体积等于底面积*高,
底面积是基于我们初始化传入的参数,然后这参数在我们的类中被肆意的到处引用,
当然这个类只是举例,所以简化了这面积参数只用来求体积.&lt;/p&gt;

&lt;p&gt;如果这个类中有一个长的属性,
从而有一个用面积参数来求宽的方法,基于此还有一个求周长的方法,甚至被引用到其他的类中作为接口&amp;hellip;&lt;/p&gt;

&lt;p&gt;可以想象如果我们传入的参数不是一个面积的概念,会怎样？
所有基于它的方法都会出错,需要重新修改,因此它需要一个&lt;em&gt;约束&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;要依赖行为-不依赖数据:e51d929b0160f65eb1da435a8f9e8108&#34;&gt;要依赖行为,不依赖数据&lt;/h2&gt;

&lt;p&gt;每一个细小的行为都只能存在于一个地方,“避免重复”(DRY),OO中的这一说法是对这一思想的简捷描述.
类包含数据与行为,数据可以是任何内容(包括简单的字符串或数值或者复杂的数组),
访问类的数据有两种方法:直接引用或者将其包裹在访问器方法里.&lt;/p&gt;

&lt;p&gt;我们应该总是将其包裹在访问器方法里,而不是直接引用这些变量,具体如下:
    Private are
    Private hig&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Property Get area()
    area = are
End Property

Property Get high()
    high = hig
End Property

Function volume()
    volume = area * high   &#39;请大家注意这一行的不同,它是用了访问器的方法,而不是直接引用类数据变量
End Function

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在访问器area方法便是这段代码里唯一可以理解are含义的地方,
实现此方法之后,are则由被四处引用的数据变成了只被定义了一次的行为,
如果传入的面积参数需要进行加工时,只要在访问器中加工一次就解决了.&lt;/p&gt;

&lt;p&gt;这种处理方法当然也会有其他的一些新问题,但不管怎样,你都应该将数据隐藏起来,
这种做法能保护代码避免它们受到意想不到的变化的影响,外部数据很常情况下不是
我们能控制的.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>设计模式在Excel VBA 类中的基础应用</title>
      <link>http://zhash.github.io/post/vba-design-pattern/</link>
      <pubDate>Thu, 24 Mar 2016 15:43:28 +0800</pubDate>
      
      <guid>http://zhash.github.io/post/vba-design-pattern/</guid>
      <description>

&lt;h1 id=&#34;design-pattern-vba:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Design Pattern VBA&lt;/h1&gt;

&lt;p&gt;跟很多玩VBA朋友一样,对于VBA的类一直摸不着头脑,觉得它的应用貌似不如想象中的强大,
直到阅读了《设计模式》的相关书籍后,才有一点心得,分享如下,当然设计模式的思想概念
什么的不会再本文中展开叙述的. 同时关于VBA类的基础知识,这边也不赘述了,相关资料也
有许多. 看书的直接后果导致个人目前认为:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;技术到最后,褪去华丽的技巧,剩下能闪烁的还是思想.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;scene:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Scene&lt;/h2&gt;

&lt;p&gt;个人在实际工作中运用最多的场景是:打开一个数据源,取出相关数据,根据不同的需求加工
整理后输出.针对上面的场景,我们来进行相关的设计,至于里面用到了哪种或哪些设计模式
大家有兴趣可以自行研究. 这里并非卖关子,只是想抛砖引玉,让大家保持好奇心,去深入了
解设计模式.&lt;/p&gt;

&lt;p&gt;如果强行说要去弄类的各种属性,也只不过是把数据源中的各个标题字段搞一遍而已,貌似是
画蛇添足, 所以我一般不搞,直接就是上类的方法.&lt;/p&gt;

&lt;h2 id=&#34;datesource:3482b2326563ae3120c25165b1c2f20a&#34;&gt;DateSource&lt;/h2&gt;

&lt;p&gt;数据源的类型包括文本文件、excel文件、各种数据库(Access,Oracle,SqlServer&amp;hellip;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;需要一个Open的方法来打开数据源,假定数据源是excel文件,OpenWorkBook()&lt;/li&gt;
&lt;li&gt;数据源有时不只一个excel文件而是一批,需要一个数组存放数据源的名称,FileArray()&lt;/li&gt;
&lt;li&gt;数据源需要一个存放路径,所以定义一个方法叫FolderPath()&lt;/li&gt;
&lt;li&gt;打开数据源取完数后,我们要关闭数据源,CloseWorkbook()&lt;/li&gt;
&lt;li&gt;通常还会定义一个方法用来释放程序过程中用到的对象FreeObj()&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;interface:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Interface&lt;/h2&gt;

&lt;p&gt;根据以上的描述一个通用接口类的方法,基本上就都出来了,汇总如下:&lt;/p&gt;

&lt;h3 id=&#34;inormal:3482b2326563ae3120c25165b1c2f20a&#34;&gt;INormal&lt;/h3&gt;

&lt;p&gt;接口类的名称为:INormal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Public Function OpenWorkbook()
End Function

Public Function FileArray()
End Function

Public Function CloseWorkbook()
End Function

Public Function FreeObj()
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上有几点需要注意一下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;接口类的名称遵循惯例以I打头&lt;/li&gt;
&lt;li&gt;接口中涉及的方法名称不要有下划线&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;据我的经验,如果接口方法名称中带下划线的话,在实现类中VBE不容易自动生成相关的实现方法名称
（这一点纯属个人经验,未经官方证实）.&lt;/p&gt;

&lt;h3 id=&#34;ichange:3482b2326563ae3120c25165b1c2f20a&#34;&gt;IChange&lt;/h3&gt;

&lt;p&gt;INormal是打底的,还会需要另一个接口类,
这个接口类名称为IChange,具体包含以下方法:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;打开数据源后,要取得相关的源数据,需要一个方法GetSource()&lt;/li&gt;
&lt;li&gt;这些源数据取得后,要进行加工整理,定义一个方法TransSource()&lt;/li&gt;
&lt;li&gt;加工整理完以后,要进行输出,所以定义一个方法FillSource()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;整理如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Public Function GetSource()
End Function

Public Function TransSource(Optional arr As Variant)
End Function

Public Function FillSource(Optional arr As Variant)
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此两个接口类已设置完成&lt;/p&gt;

&lt;h2 id=&#34;object:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Object&lt;/h2&gt;

&lt;p&gt;现在来看实现类&lt;/p&gt;

&lt;h3 id=&#34;company:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Company&lt;/h3&gt;

&lt;p&gt;先建一个实现类,名称为Company,引用上面的两个接口&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Implements INormal
Implements IChange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先实现接口类INormal的方法:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Private Function INormal_OpenWorkbook()
End Function

Private Function INormal_FolderPath()
End Function

Private Function INormal_FileArray()
End Function

Private Function INormal_CloseWorkbook()
End Function

Private Function INormal_FreeObj()
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再实现IChange接口类的方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Private Function IChange_GetSource() As Variant
    dim arr:dim brr()
    INormal_FolderPath
    arr = INormal_FileArray
    If IsArray(arr) Then
        For i = 0 To UBound(arr)
            INormal_OpenWorkbook arr(i)
            ...
            INormal_CloseWorkbook
        Next
        Erase arr
    End If
    IChange_GetSource = brr
End Function

Private Function IChange_TransSource( Optional arr As Variant )

Private Function IChange_FillSource(Optional arr As Variant)
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更经常的我会把类的构造函数与析构函数利用起来&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Private Sub Class_Initialize()
    ...
End Sub

Private Sub Class_Terminate()
    INormal_FreeObj
    ...
End Sub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然上面这些实现类的中所涉及的具体方法,都需要根据具体情况自行编程,上面都只是一个框架.&lt;/p&gt;

&lt;p&gt;这个Company类是针对一个需求搞出来的.&lt;/p&gt;

&lt;h3 id=&#34;salary:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Salary&lt;/h3&gt;

&lt;p&gt;现在我们再根据另外一个需求再新增一个实现类Salary&lt;/p&gt;

&lt;p&gt;数据源跟前面的类一样,但加工过程、输出要求等不一样&lt;/p&gt;

&lt;p&gt;Salary类的相关方法与Company类似,当然具体实现细节是不一样的,但都是继承前面的两个接口,方法名称都一样.&lt;/p&gt;

&lt;p&gt;至此我们搭积木盖房子所需要的积木基本上就搞出来了,人家说巧妇难为无米之炊,这米得先备着.&lt;/p&gt;

&lt;p&gt;开始煮菜:热锅、放油&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;organization-code:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Organization code&lt;/h2&gt;

&lt;p&gt;新建一模块（不是类模块）,命名为:Pro&lt;/p&gt;

&lt;p&gt;声明一接口类的对象类: Public clsIChange As IChange&lt;/p&gt;

&lt;h3 id=&#34;getclass:3482b2326563ae3120c25165b1c2f20a&#34;&gt;getClass&lt;/h3&gt;

&lt;p&gt;首先我们要知道程序需要哪个实现类,所以我们在该模块中定义一个函数getClass,
通常我们需要一个标志来区分,这边我以当前工作表的名称来区分所用的实现类
（现实工作中经常这样,在一个工作簿中,给需求方发不同的表）.
具体如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Function getClass() As Variant
    Select Case ActiveSheet.Name
        Case &amp;quot;Comp&amp;quot;
            Set clsIChange = New Company
        Case &amp;quot;Sala&amp;quot;
            Set clsIChange = New Salary
    End Select
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是可扩展的,如果还有其他表及对应的其他实现类,只需要增加Case即可.&lt;/p&gt;

&lt;h3 id=&#34;getclasslist:3482b2326563ae3120c25165b1c2f20a&#34;&gt;getClassList&lt;/h3&gt;

&lt;p&gt;接着定义一个函数进行类数据的取数加工输出:
    Function getClassList() As Variant
        Dim arr, brr
        With clsIChange
            arr = .GetSource
            brr = .TransSource(arr)
            .FillSource brr
        End With
        If IsArray(arr) Then Erase arr
        If IsArray(brr) Then Erase brr
    End Function&lt;/p&gt;

&lt;p&gt;以上我是为了调试哪个步骤出错多分了几步,调试正常或稳定的函数可以更简短如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Function getClassList() As Variant
    With clsIChange
        .FillSource .TransSource(.GetSource)
    End With
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但个人不赞成这么做,因为需求不停在变,说不定哪天你又要开始调试了.
当然我应该倡导有问题要输出详细的文档来处理,但单步调试通常对于我
们来说是比较能掌握的实用方法.&lt;/p&gt;

&lt;p&gt;基本上菜做完了,要出锅了&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;result:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Result&lt;/h2&gt;

&lt;p&gt;我们定义一个main过程&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sub main()
    getClass
    getClassList
End Sub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后用一个控件关联main即可,这个控件可以用加载宏搞到菜单栏中,
这样在不同的工作表中点击它就可以取得不同数据结果了.&lt;/p&gt;

&lt;p&gt;PS:我通常不是要关联控件的过程,都写为函数以Function打头,
而不管它到底是否需要返回值,这是因为以前有过经历,
当要关联控件宏时,如果都是Sub,会出来一堆的列表,不容易选.&lt;/p&gt;

&lt;p&gt;至此已经是讲完了,可能主要玩Excel VBA的朋友还没体会出它的好用之处,简单提示几点:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;编程最烦的是什么?需求的变更!一个笑话是要折磨一个程序员最好的方法是:
不断的变更需求.&lt;/li&gt;
&lt;li&gt;需求变更后,我们需要调整代码,但调整的代码是否会影响其他未调整的部分?
是否会引进新的bug?这些我们都不敢保证.但以上基于设计模式的框架在很大
程度上避免了这些问题,比如现在Comp表的数据加工需求变了,这时我们只要调
整Company类的TransSource方法即可,而不用担心它会影响到其他.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Go</title>
      <link>http://zhash.github.io/presentation/first-go-app/</link>
      <pubDate>Sun, 20 Jul 2014 08:51:33 +0000</pubDate>
      
      <guid>http://zhash.github.io/presentation/first-go-app/</guid>
      <description>

&lt;p&gt;This presentation was given as a Workshop at OSCON 2014.&lt;/p&gt;

&lt;div class=&#34;embed slideshare&#34;&gt;
&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/37166206?rel=0&#34; width=&#34;599&#34; height=&#34;487&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen webkitallowfullscreen mozallowfullscreen&gt; &lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;description:088755068cead46cb4bc8a40f467658f&#34;&gt;Description&lt;/h2&gt;

&lt;p&gt;New to Go? This tutorial will give developers an introduction and practical
experience in building applications with the Go language. Gopher Steve Francia,
Author of &lt;a href=&#34;http://hugo.spf13.com&#34;&gt;Hugo&lt;/a&gt;,
&lt;a href=&#34;http://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;, and many other popular Go packages
breaks it down step by step as you build your own full featured Go application.&lt;/p&gt;

&lt;p&gt;Starting with an introduction to the Go language. He then reviews the fantastic
go tools available. With our environment ready we will learn by doing. The
rest of the time is dedicated building a working go web and cli
application. Through our application development experience we will introduce
key features, libraries and best practices of using Go.&lt;/p&gt;

&lt;p&gt;This tutorial is designed with developers in mind. Prior experience with any of the
following languages: ruby, perl, java, c#, javascript, php, node.js, or python
is preferred. We will be using the MongoDB database as a backend for our
application.&lt;/p&gt;

&lt;p&gt;We will be using/learning a variety of libraries including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bytes and strings&lt;/li&gt;
&lt;li&gt;templates&lt;/li&gt;
&lt;li&gt;net/http&lt;/li&gt;
&lt;li&gt;io, fmt, errors&lt;/li&gt;
&lt;li&gt;cobra&lt;/li&gt;
&lt;li&gt;mgo&lt;/li&gt;
&lt;li&gt;Gin&lt;/li&gt;
&lt;li&gt;Go.Rice&lt;/li&gt;
&lt;li&gt;Cobra&lt;/li&gt;
&lt;li&gt;Viper&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;slide-transcript:088755068cead46cb4bc8a40f467658f&#34;&gt;Slide Transcript:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Building   your  first   Go  App 1 Go mascot designed by Ren&amp;#233;e French and copyrighted under the Creative Commons Attribution 3.0 license.&lt;/li&gt;
&lt;li&gt;@spf13 •Author of Hugo, Cobra, Viper &amp;amp; More •Chief Developer Advocate for MongoDB •Gopher 2&lt;/li&gt;
&lt;li&gt;My  Go  Story •I write a medium size blog •Frustrated with Wordpress performance &amp;amp; maintenance •Existing Static Site Generators had complicated installations &amp;amp; were very slow •Began writing a S.S.G. in Go called Hugo 1.5 years ago 4&lt;/li&gt;
&lt;li&gt;hugo.spf13.com&lt;/li&gt;
&lt;li&gt;Hugo •Hugo is 2nd fastest growing Static Site Generator (40-50 * a week on github) •Hugo is one of the fastest Static Site Generators. 1000x faster than Jekyll •Easiest Installation of any SSG. Download and run •2nd most contributors of any Go project (Docker 1st)6&lt;/li&gt;
&lt;li&gt;Plan •Introduce Go Language •Introduce Tools &amp;amp; Libraries •Build our application •Tell the world how awesome we are 8&lt;/li&gt;
&lt;li&gt;Ground  Rules •Workshops are hard, everyone works at a different pace •We will move on when about 50% are ready •Slides are online, feel free to work ahead or catch up 9&lt;/li&gt;
&lt;li&gt;http:// spf13.com/ presentation/ first-go-app/ 10&lt;/li&gt;
&lt;li&gt;Installing  Go •You should already have Go installed •If you don’t, do it NOW •Installation Guide 11&lt;/li&gt;
&lt;li&gt;Installing  MongoDB •You should already have MongoDB installed •If you don’t, do it NOW •Installation Guide 12&lt;/li&gt;
&lt;li&gt;Git  &amp;amp;  Mercurial •Lastly we need Git &amp;amp; Mercurial •&lt;a href=&#34;http://git-scm.com/downloads&#34;&gt;http://git-scm.com/downloads&lt;/a&gt; •&lt;a href=&#34;http://mercurial.selenic.com/wiki/Download&#34;&gt;http://mercurial.selenic.com/wiki/Download&lt;/a&gt; 13&lt;/li&gt;
&lt;li&gt;Introduction     to  Go 14&lt;/li&gt;
&lt;li&gt;Why  Another  Language? • Software is slow • Sofware is hard to write • Software doesn’t scale well 15&lt;/li&gt;
&lt;li&gt;Go  is  Fast • Go execution speed is close to C • Go compile time rivals dynamic interpretation 16&lt;/li&gt;
&lt;li&gt;Go  is  Friendly • Feels like a dynamic language in many ways • Very small core language, easy to remember all of it • Single binary installation, no dependencies • Extensive Tooling &amp;amp; StdLib 17&lt;/li&gt;
&lt;li&gt;Go  is  Concurrent • Concurrency is part of the language • Any function can become a goroutine • Goroutines run concurrently, communicate through channels • Select waits for communication on any of a set of channels 18&lt;/li&gt;
&lt;li&gt;Go’s  Inspiration •C: statement and expression syntax •Pascal: declaration syntax •Modula 2, Oberon 2: packages •CSP, Occam, Newsqueak, Limbo, Alef: concurrency •BCPL: the semicolon rule •Smalltalk: methods •Newsqueak: &amp;lt;-, := •APL: iota 19 … AND lessons good and bad from all those plus: C++, C#, Java, JavaScript, LISP, Python, Scala, &amp;hellip;&lt;/li&gt;
&lt;li&gt;— txxxxd “Most  of  the  appeal   for  me  is  not  the   features  that  Go  has,   but  rather  the   features  that  have   been  intentionally  left   out.” 20&lt;/li&gt;
&lt;li&gt;— Rob Pike “Why  would  you  have   a  language  that  is   not  theoretically   exciting?  Because  it’s   very  useful.” 21&lt;/li&gt;
&lt;li&gt;package main ! import &amp;quot;fmt&amp;quot; ! func main() { fmt.Println(“Hello, 世界&amp;quot;) } Hello  World 22&lt;/li&gt;
&lt;li&gt;Package •Not classes or objects •No subpackages •Fundamental building block in Go •Visibility is package-level, not type-level •Programs run “main” package 23 package main ! import &amp;quot;fmt&amp;quot; ! func main() { fmt.Println(&amp;quot;Hello, 世界&amp;quot;) }&lt;/li&gt;
&lt;li&gt;import •Provides access to a package •Package consists of types, functions, etc… •No circular dependencies 24 package main ! import &amp;quot;fmt&amp;quot; ! func main() { fmt.Println(&amp;quot;Hello, 世界&amp;quot;) }&lt;/li&gt;
&lt;li&gt;“fmt&amp;quot; •Package path is just   a string •Standard library sits at the root (no path) •Core language is very small •Most functionality is in Stdlibs 25 package main ! import &amp;quot;fmt&amp;quot; ! func main() { fmt.Println(&amp;quot;Hello, 世界&amp;quot;) }&lt;/li&gt;
&lt;li&gt;func •Declaring a function •Same syntax for methods, anonymous functions &amp;amp; closures •main.main() is the function run when the program is executed 26 package main ! import &amp;quot;fmt&amp;quot; ! func main() { fmt.Println(&amp;quot;Hello, 世界&amp;quot;) }&lt;/li&gt;
&lt;li&gt;Main •No void •No return value •No function args   (command line is in os package) 27 package main ! import &amp;quot;fmt&amp;quot; ! func main() { fmt.Println(&amp;quot;Hello, 世界&amp;quot;) }&lt;/li&gt;
&lt;li&gt;{ } •Braces not spaces •Feels like C ( &amp;amp; most languages ) •Newline must be after brace   (semicolons are inserted during compiliation) 28 package main ! import &amp;quot;fmt&amp;quot; ! func main() { fmt.Println(&amp;quot;Hello, 世界&amp;quot;) }&lt;/li&gt;
&lt;li&gt;fmt •Accessing the package   imported above •Everything visible in the package will be accessible through the name (or alias if provided) 29 package main ! import &amp;quot;fmt&amp;quot; ! func main() { fmt.Println(&amp;quot;Hello, 世界&amp;quot;) }&lt;/li&gt;
&lt;li&gt;Println • Println, not println • Println, not print_ln •Capital for export •Variadic function using reflection 30 package main ! import &amp;quot;fmt&amp;quot; ! func main() { fmt.Println(&amp;quot;Hello, 世界&amp;quot;) }&lt;/li&gt;
&lt;li&gt;“Hello,  世界” •UTF-8 input source •Strings are immutable •Strings are UTF-8 encoded •String is a built-in type 31 package main ! import &amp;quot;fmt&amp;quot; ! func main() { fmt.Println(&amp;quot;Hello, 世界&amp;quot;) }&lt;/li&gt;
&lt;li&gt;Rob  Pike  did  it  better &lt;a href=&#34;http://confreaks.com/videos/3419-&#34;&gt;http://confreaks.com/videos/3419-&lt;/a&gt; gophercon2014-opening-day-keynote 32&lt;/li&gt;
&lt;li&gt;Tons  more… •types •constants •methods •interfaces •pointers •control flow •conditionals •tools •packages •concurrency 33&lt;/li&gt;
&lt;li&gt;Effective  Go 34&lt;/li&gt;
&lt;li&gt;Lets  write   some  code   ! Introduce  the     go  tools 35&lt;/li&gt;
&lt;li&gt;package main ! import &amp;quot;fmt&amp;quot; ! func main() { fmt.Println(&amp;quot;Hello,World&amp;quot;) } Hello  World 36 hello.go&lt;/li&gt;
&lt;li&gt;❯ go run hello.go    Hello,World Go  Run 37&lt;/li&gt;
&lt;li&gt;❯ go build hello.go ! ❯ls -lh  1.7M Jun 17 22:44 hello  72B Jun 17 22:43 hello.go ! ❯ ./hello  Hello, World Go  Build 38&lt;/li&gt;
&lt;li&gt;Go  Fmt •Automatically formats Go source code •Ends stylistic debates •Integration with editors (vim, emacs, others) •Can also refactor code   (see &lt;a href=&#34;http://spf13.com/post/go-fmt&#34;&gt;http://spf13.com/post/go-fmt&lt;/a&gt; ) 39&lt;/li&gt;
&lt;li&gt;go  Test   •Enables easy testing of application •Integrates with the testing package •Supports benchmark, functional &amp;amp; unit style testing •Combine with ‘looper’ to have realtime feedback 40&lt;/li&gt;
&lt;li&gt;package main ! import &amp;quot;testing&amp;quot; ! func TestOne(t *testing.T) { one := false if !one { t.Errorf(“Test Failed”) } } Hello  Test 41 hello_test.go&lt;/li&gt;
&lt;li&gt;❯ go test ./&amp;hellip; &amp;mdash; FAIL: TestOne (0.00 seconds) hello&lt;em&gt;test.go:8: Test failed FAIL FAIL&lt;/em&gt;/Code/firstApp0.012s ! ! ❯ go test ./&amp;hellip; ok _/Code/firstApp0.012s Go  Test 42&lt;/li&gt;
&lt;li&gt;Go   Planet 43The planet logo is based on the Go mascot designed by Ren&amp;#233;e French and copyrighted under the Creative Commons Attribution 3.0 license.&lt;/li&gt;
&lt;li&gt;Why  Planet? •CLI application •Web application •Good introduction •Right sized •Database (MongoDB) •Concurrency 45&lt;/li&gt;
&lt;li&gt;Steps 0. Env Setup 1. Commands 2. Configuration 3. Working with Feeds 4. DB as Storage 5-6. Web Server 7-8. DB -&amp;gt; Templates 9. &amp;amp; 10. Add Polish 46&lt;/li&gt;
&lt;li&gt;Step  0     Setting  up  our   environment 47&lt;/li&gt;
&lt;li&gt;Go  PAth   ! $GOPATH 48&lt;/li&gt;
&lt;li&gt;Go  path •The GOPATH environment variable specifies the location of your workspace (and dependencies) •It must not be the same path as your Go installation 49&lt;/li&gt;
&lt;li&gt;❯ mkdir $HOME/go  ! ❯ export   GOPATH=$HOME/go Setting  up 50&lt;/li&gt;
&lt;li&gt;export GOPATH=$USER/go export GOROOT=&lt;code&gt;go env GOROOT&lt;/code&gt; PATH=$PATH:$GOPATH/bin Linux  &amp;amp;  Mac 51 Add this to your ~/.bashrc (or equivalent)&lt;/li&gt;
&lt;li&gt;Windows •Control panel &amp;gt; System 52&lt;/li&gt;
&lt;li&gt;Go  PAth •/home/user/gocode/ ($GOPATH) • src/ (put your source code here) • bin/ (binaries installed here) • pkg/ (installed package objects) 53&lt;/li&gt;
&lt;li&gt;Creating  our   project 54&lt;/li&gt;
&lt;li&gt;Project  Dir •Make a directory inside of $GOPATH/src •I like mine to be in   $GOPATH/src/github.com/spf13/PROJECTNAME •It can not be a symlink •We will call this our working directory or $wd 55&lt;/li&gt;
&lt;li&gt;package main ! import &amp;quot;fmt&amp;quot; ! func main() { fmt.Println(“My Project&amp;quot;) } main.go 56&lt;/li&gt;
&lt;li&gt;❯ go run main.go    My Project Run  it 57&lt;/li&gt;
&lt;li&gt;58 I’m on the #gopath with @spf13 at #OSCON  &lt;a href=&#34;http://j.mp/onGoPath&#34;&gt;http://j.mp/onGoPath&lt;/a&gt; Tweet  Break&lt;/li&gt;
&lt;li&gt;Step  1     Creating  the   Command(s) 59&lt;/li&gt;
&lt;li&gt;Defining    our  first   command 60&lt;/li&gt;
&lt;li&gt;Structs •Short for structure •Objectish … blend of data &amp;amp; methods, but no inheritance •Really cheap. Struct{} is free (0 bytes). 61&lt;/li&gt;
&lt;li&gt;Functions •Can have multiple return values •No overloading •No optional parameters (but variadic) 62&lt;/li&gt;
&lt;li&gt;First  class  Functions •Function literals are anonymous functions in Go •Can assign to a variable or field •Can use as function parameters or return values •Can be created as a goroutine 63&lt;/li&gt;
&lt;li&gt;pointers •Function calls copy arguments into the function •Pointers reference a location in memory where a value is stored rather than the value itself •In Go a pointer is represented using the * •The &amp;amp; operator gives us the address of a variable •Go automatically dereferences pointers when using “.” 64&lt;/li&gt;
&lt;li&gt;cobra •A CLI Commander •Easy management of commands &amp;amp; flags •Used by bitbucket, openshift &amp;amp; lots more 65 &lt;a href=&#34;http://fav.me/d5gkby7&#34;&gt;http://fav.me/d5gkby7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;go get -u   github.com/spf13/cobra Getting  Cobra 66&lt;/li&gt;
&lt;li&gt;❯ mkdir $wd/commands Commands  Dir 67&lt;/li&gt;
&lt;li&gt;// Copyright &amp;#169; 2014 Steve Francia &amp;lt;spf@spf13.com&amp;gt;. // // Use of this source code is governed by an Apache2 // license that can be found in the LICENSE file. ! package commands ! import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; ! &amp;quot;github.com/spf13/cobra&amp;quot; ) planet.go  (1) 68&lt;/li&gt;
&lt;li&gt;Path  =  Url go get uses it to install 69&lt;/li&gt;
&lt;li&gt;var RootCmd = &amp;amp;cobra.Command{ Use: &amp;quot;dagobah&amp;quot;, Short: &lt;code&gt;Dagobah is an awesome planet style RSS aggregator&lt;/code&gt;, Long: &lt;code&gt;Dagobah provides planet style RSS aggregation. It is inspired by python planet. It has a simple YAML configuration and provides it&amp;amp;#39;s own webserver.&lt;/code&gt;, Run: func(cmd *cobra.Command, args []string) { fmt.Println(&amp;quot;Dagobah runs&amp;quot;) }, } planet.go  (2) 70&lt;/li&gt;
&lt;li&gt;executing   cobra’s   command 71&lt;/li&gt;
&lt;li&gt;Variable  Assignment •‘:=‘ is the short variable declaration operator  Declares, creates &amp;amp; assigns simultaneously while infering type •Assignment via ‘=‘ requires prior declaration •var foo int = 10 is the same as foo := 10 72&lt;/li&gt;
&lt;li&gt;Error  Handling •Errors are not exceptional. Should be part of the language •Typically one of the return values •No exceptions in Go fd, err := os.Open(&amp;quot;test.go&amp;quot;)  if err != nil {  log.Fatal(err)  } 73&lt;/li&gt;
&lt;li&gt;(  Don’t)  Panic •Should rarely be used if ever •Performs a full stack trace dump for end users •Use only in the most dire circumstances (like package can’t find FileSystem) •Can use ‘recover’, but only inside deferred functions 74&lt;/li&gt;
&lt;li&gt;func Execute() { err := RootCmd.Execute() if err != nil { fmt.Println(err) os.Exit(-1) } } planet.go  (3) 75&lt;/li&gt;
&lt;li&gt;// Copyright &amp;#169; 2014 Steve Francia &amp;lt;spf@spf13.com&amp;gt;. // // Use of this source code is governed by an Apache2 // license that can be found in the LICENSE file. ! package main ! import &amp;quot;github.com/spf13/firstGoApp-Planet/commands&amp;quot; ! func main() { commands.Execute() } main.go 76 Make sure to use your path&lt;/li&gt;
&lt;li&gt;❯ go run main.go  Dagobah runs ! ❯ go run main.go help Running  it 77&lt;/li&gt;
&lt;li&gt;Getting  Help •&lt;a href=&#34;https://godoc.org/github.com/spf13/cobra&#34;&gt;https://godoc.org/github.com/spf13/cobra&lt;/a&gt; •&lt;a href=&#34;https://github.com/spf13/firstGoApp-Planet/&#34;&gt;https://github.com/spf13/firstGoApp-Planet/&lt;/a&gt; tree/step1 78&lt;/li&gt;
&lt;li&gt;Creating #CobraCommands with @spf13 at #OSCON &lt;a href=&#34;http://j.mp/cobracmd&#34;&gt;http://j.mp/cobracmd&lt;/a&gt; Tweet  Break&lt;/li&gt;
&lt;li&gt;Step  2     Easy  Configuration 80&lt;/li&gt;
&lt;li&gt;Handing   Config  files 81&lt;/li&gt;
&lt;li&gt;Package  Identifiers •Export with Capital name •No automatic getters &amp;amp; setters •var field … func Field() … func SetField()   are appropriate names 82&lt;/li&gt;
&lt;li&gt;init() •Each source file can have one (or multiple) •Niladic function to setup state   (function without return value) •Called after all variable declarations in the package 83&lt;/li&gt;
&lt;li&gt;Scoping •Very granular scoping. •Variables declared inside { } only survive in that cotrol structure (for, if, etc) •The := trap  if := is used to declare x and x already exists in an outer scope a new variable x will be created (shadowing) 84&lt;/li&gt;
&lt;li&gt;package main ! import ( &amp;quot;errors&amp;quot; &amp;quot;fmt&amp;quot; ) ! var Foo int ! func Zero() (int, error) { return 0, errors.New(&amp;quot;yo&amp;quot;) } ! ! func main() { ! Foo = 10 ! fmt.Println(&amp;quot;outer:&amp;quot;, Foo) // 10 ! if Foo, err := Zero(); err != nil { fmt.Println(&amp;quot;inner:&amp;quot;, Foo) // 0 } ! fmt.Println(&amp;quot;outer again:&amp;quot;, Foo) // still 10 } :=  Trap 85&lt;a href=&#34;http://play.golang.org/p/i4L9Ao1P65&#34;&gt;http://play.golang.org/p/i4L9Ao1P65&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Viper •A configuration manager •Easy loading of config files •Registry for application settings •Designed to work well with (or without) Cobra 86&lt;/li&gt;
&lt;li&gt;go get -u   github.com/spf13/viper Getting  Viper 87&lt;/li&gt;
&lt;li&gt;// Copyright &amp;#169; 2014 Steve Francia &amp;lt;spf@spf13.com&amp;gt;. // // Use of this source code is governed by an Apache2 // license that can be found in the LICENSE file. ! package commands ! import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; ! &amp;quot;github.com/spf13/cobra&amp;quot; &amp;quot;github.com/spf13/viper&amp;quot; ) planet.go  (1) 88&lt;/li&gt;
&lt;li&gt;var CfgFile string ! func init() { cobra.OnInitialize(initConfig)  RootCmd.PersistentFlags().StringVar(&amp;amp;CfgFile, &amp;quot;config&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;config file (default is $HOME/dagobah/config.yaml)&amp;quot;) } ! func initConfig() { if CfgFile != &amp;quot;&amp;quot; { viper.SetConfigFile(CfgFile) } viper.SetConfigName(&amp;quot;config&amp;quot;) viper.AddConfigPath(&amp;quot;/etc/dagobah/&amp;quot;) viper.AddConfigPath(&amp;quot;$HOME/.dagobah/&amp;quot;) viper.ReadInConfig() } planet.go  (2) 89&lt;/li&gt;
&lt;li&gt;Creating  our   config  file 90&lt;/li&gt;
&lt;li&gt;appname: &amp;quot;Dagobah&amp;quot; feeds: - &amp;quot;&lt;a href=&#34;http://spf13.com/index.xml&amp;quot;&#34;&gt;http://spf13.com/index.xml&amp;quot;&lt;/a&gt; - &amp;quot;&lt;a href=&#34;http://dave.cheney.net/feed&amp;quot;&#34;&gt;http://dave.cheney.net/feed&amp;quot;&lt;/a&gt; - &amp;quot;&lt;a href=&#34;http://www.goinggo.net/feeds/posts/default&amp;quot;&#34;&gt;http://www.goinggo.net/feeds/posts/default&amp;quot;&lt;/a&gt; - &amp;quot;&lt;a href=&#34;http://blog.labix.org/feed&amp;quot;&#34;&gt;http://blog.labix.org/feed&amp;quot;&lt;/a&gt; - &amp;quot;&lt;a href=&#34;http://blog.golang.org/feed.atom&amp;quot;&#34;&gt;http://blog.golang.org/feed.atom&amp;quot;&lt;/a&gt; ! $HOME/.dagobah/config.yaml 91&lt;/li&gt;
&lt;li&gt;trying  it  out 92&lt;/li&gt;
&lt;li&gt;var RootCmd = &amp;amp;cobra.Command{ Use: &amp;quot;&amp;hellip;&amp;quot;, Short: &lt;code&gt;...&lt;/code&gt;, Long: &lt;code&gt;...&lt;/code&gt;, Run: rootRun, } ! func rootRun(cmd *cobra.Command, args []string) { fmt.Println(viper.Get(&amp;quot;feeds&amp;quot;)) fmt.Println(viper.GetString(&amp;quot;appname&amp;quot;)) } planet.go  (3) 93&lt;/li&gt;
&lt;li&gt;❯ go run main.go  [&lt;a href=&#34;http://spf13.com/index.xml&#34;&gt;http://spf13.com/index.xml&lt;/a&gt; http:// dave.cheney.net/feed http:// www.goinggo.net/feeds/posts/default &lt;a href=&#34;http://blog.labix.org/feed&#34;&gt;http://blog.labix.org/feed&lt;/a&gt; http:// blog.golang.org/feed.atom]    Dagobah Running  it 94&lt;/li&gt;
&lt;li&gt;I got bit by the #goviper at #OSCON   &lt;a href=&#34;http://j.mp/go-viper&#34;&gt;http://j.mp/go-viper&lt;/a&gt; Tweet  Break&lt;/li&gt;
&lt;li&gt;https:// github.com/spf13/ firstGoApp- Planet/tree/ step2 96&lt;/li&gt;
&lt;li&gt;Step  3     Working  with  Feeds 97&lt;/li&gt;
&lt;li&gt;Finding   Libraries 98&lt;/li&gt;
&lt;li&gt;Go-Search.org 99&lt;/li&gt;
&lt;li&gt;Go  wiki 100&lt;/li&gt;
&lt;li&gt;go-pkg-rss •Fetch Rss and Atom feeds from the internet •Supports RSS .92, 1.0, 2.0 &amp;amp; Atom 1.0 •Respects TTL, SkipDays, CacheTimeout, etc in the feeds 101&lt;/li&gt;
&lt;li&gt;go get -u   github.com/jteeuwen/go- pkg-rss Getting  Go-PKG-RSS 102&lt;/li&gt;
&lt;li&gt;boilerplate    stuff 103&lt;/li&gt;
&lt;li&gt;import ( &amp;quot;time&amp;quot; &amp;hellip; ) ! func addCommands() { RootCmd.AddCommand(fetchCmd) } ! func Execute() { addCommands() &amp;hellip; } planet.go 104&lt;/li&gt;
&lt;li&gt;// Copyright &amp;#169; 2014 Steve Francia &amp;lt;spf@spf13.com&amp;gt;. // // Use of this source code is governed by an Apache2 // license that can be found in the LICENSE file. ! package commands ! import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;time&amp;quot; ! rss &amp;quot;github.com/jteeuwen/go-pkg-rss&amp;quot; &amp;quot;github.com/spf13/cobra&amp;quot; &amp;quot;github.com/spf13/viper&amp;quot; ) Fetch.Go  (1) 105&lt;/li&gt;
&lt;li&gt;Creating  our   own  type 106&lt;/li&gt;
&lt;li&gt;Named  Types •Can be any known type (struct, string, int, slice, a new type you’ve declared, etc) •Can have methods declared on it •Not an alias. Explicit type. 107&lt;/li&gt;
&lt;li&gt;Slices  &amp;amp;  arrays •Array is fixed in length •Slice can be viewed as a dynamic array (can grow) •Slice is a view of an array •Slice is the core data structure in Go for lists of data 108&lt;/li&gt;
&lt;li&gt;type Config struct { Feeds []string Port int } Fetch.Go  (2) 109&lt;/li&gt;
&lt;li&gt;Defining  the   fetch   command 110&lt;/li&gt;
&lt;li&gt;New(    ) •new(T) Does 2 things at once: •Allocates new zeroed value of type T •Returns a pointer to the new value ( *T) •Used for all non-reference types 111&lt;/li&gt;
&lt;li&gt;Make(  ) •Creates slices, maps, and channels only •These types are special “reference” types •Makes a initialized (not zeroed) value of type T •Does not return a pointer 112&lt;/li&gt;
&lt;li&gt;Composite  Literals •An expression that creates a new value each time it is evaluated •We’ve already used these quite a bit •Can also be create values of arrays, slices, and maps •Pseudo Constructor •eg File{fd: fd, name: name} 113&lt;/li&gt;
&lt;li&gt;Constructors •Not built into Go •Use Composite Literals when possible •If initialization is needed use a factory •Convention is to use New___() •… or New() when only one type is exported in the package 114&lt;/li&gt;
&lt;li&gt;var fetchCmd = &amp;amp;cobra.Command{ Use: &amp;quot;fetch&amp;quot;, Short: &amp;quot;Fetch feeds&amp;quot;, Long: &lt;code&gt;Dagobah will fetch all feeds listed in the config file.&lt;/code&gt;, Run: fetchRun  } ! func init() { fetchCmd.Flags().Int(&amp;quot;rsstimeout&amp;quot;, 5, &amp;quot;Timeout (in min) for RSS retrival&amp;quot;) viper.BindPFlag(&amp;quot;rsstimeout&amp;quot;, fetchCmd.Flags().Lookup(&amp;quot;rsstimeout&amp;quot;)) } Fetch.go  (3) 115&lt;/li&gt;
&lt;li&gt;Fetching  in  a   goroutine 116&lt;/li&gt;
&lt;li&gt;GoRoutines •A function executing concurrently with other goroutines in the same address space •Lightweight •Not threads, coroutines, or processes 117&lt;/li&gt;
&lt;li&gt;Channels •Channels are lightweight •Synchronize goroutines by communication rather than locking shared memory •Channel &amp;lt;- Sender —- Writes block when channel is full •&amp;lt;- Channel —- Reads blocks waiting for something to be read •Great talk on channels given at GopherCon  &lt;a href=&#34;http://confreaks.com/videos/3422-gophercon2014-a-channel-compendium&#34;&gt;http://confreaks.com/videos/3422-gophercon2014-a-channel-compendium&lt;/a&gt; 118&lt;/li&gt;
&lt;li&gt;Marshaling  into •We can’t return a T (no generics) •We can reflect on any value of any type •Marshal accepts the address of the value so it can manipulate the value directly 119&lt;/li&gt;
&lt;li&gt;func fetchRun(cmd *cobra.Command, args []string) {   Fetcher() ! sigChan := make(chan os.Signal, 1) signal.Notify(sigChan, os.Interrupt) &amp;lt;-sigChan } Fetch.go  (4) 120&lt;/li&gt;
&lt;li&gt;func Fetcher() { var config Config if err := viper.Marshal(&amp;amp;config); err != nil { fmt.Println(err) } ! for _, feed := range config.Feeds { go PollFeed(feed.Url) } } Fetch.go  (5) 121&lt;/li&gt;
&lt;li&gt;Building  our   fetcher 122&lt;/li&gt;
&lt;li&gt;Learning  about  go-pkg-rss •How do we learn how to use the package? 123&lt;/li&gt;
&lt;li&gt;Learning  about  go-pkg-rss •github.com/jteeuwen/go-pkg-rss •Readme is pretty lacking •godoc.org/github.com/jteeuwen/go-pkg-rss 124&lt;/li&gt;
&lt;li&gt;godoc.org/github.com/jteeuwen/go-pkg-rss 125&lt;/li&gt;
&lt;li&gt;Go  Search 126&lt;/li&gt;
&lt;li&gt;For •For, Foreach &amp;amp; While are all spelled ‘for’ in Go for init; condition; post { }   // Like a C for for condition { }   // Like a C while for { }   // Like a C for(;;) 127&lt;/li&gt;
&lt;li&gt;func PollFeed(uri string) { timeout := viper.GetInt(&amp;quot;RSSTimeout&amp;quot;) if timeout &amp;lt; 1 { timeout = 1 } feed := rss.New(timeout, true, chanHandler, itemHandler) ! for { if err := feed.Fetch(uri, nil); err != nil { fmt.Fprintf(os.Stderr, &amp;quot;[e] %s: %s&amp;quot;, uri, err) return } ! fmt.Printf(&amp;quot;Sleeping for %d seconds on %sn&amp;quot;, feed.SecondsTillUpdate(), uri) time.Sleep(time.Duration(feed.SecondsTillUpdate() * 1e9)) } } Fetch.GO  (6) 128&lt;/li&gt;
&lt;li&gt;func chanHandler(feed *rss.Feed, newchannels []*rss.Channel) { fmt.Printf(&amp;quot;%d new channel(s) in %sn&amp;quot;, len(newchannels), feed.Url) } ! func itemHandler(feed *rss.Feed, ch *rss.Channel, newitems []*rss.Item) { fmt.Printf(&amp;quot;%d new item(s) in %sn&amp;quot;, len(newitems), feed.Url) } Fetch.go  (7) 129&lt;/li&gt;
&lt;li&gt;❯ go run dagobah.go fetch &amp;ndash;rsstimeout=1    15 new item(s) in &lt;a href=&#34;http://spf13.com/index.xml &#34;&gt;http://spf13.com/index.xml &lt;/a&gt; 1 new channel(s) in &lt;a href=&#34;http://spf13.com/index.xml &#34;&gt;http://spf13.com/index.xml &lt;/a&gt; Sleeping for 300 seconds on &lt;a href=&#34;http://spf13.com/index.xml &#34;&gt;http://spf13.com/index.xml &lt;/a&gt; 25 new item(s) in &lt;a href=&#34;http://www.goinggo.net/feeds/posts/default &#34;&gt;http://www.goinggo.net/feeds/posts/default &lt;/a&gt; 1 new channel(s) in &lt;a href=&#34;http://www.goinggo.net/feeds/posts/default &#34;&gt;http://www.goinggo.net/feeds/posts/default &lt;/a&gt; Sleeping for 300 seconds on &lt;a href=&#34;http://www.goinggo.net/feeds/posts/&#34;&gt;http://www.goinggo.net/feeds/posts/&lt;/a&gt; default  10 new item(s) in &lt;a href=&#34;http://dave.cheney.net/feed &#34;&gt;http://dave.cheney.net/feed &lt;/a&gt; 1 new channel(s) in &lt;a href=&#34;http://dave.cheney.net/feed &#34;&gt;http://dave.cheney.net/feed &lt;/a&gt; Sleeping for 299 seconds on &lt;a href=&#34;http://dave.cheney.net/feed &#34;&gt;http://dave.cheney.net/feed &lt;/a&gt; Running  it 130&lt;/li&gt;
&lt;li&gt;Tweet  Break I wrote my first goroutine at #OSCON with @spf13&lt;/li&gt;
&lt;li&gt;https:// github.com/spf13/ firstGoApp- Planet/tree/ step3 132&lt;/li&gt;
&lt;li&gt;Step  4     Storing  in    the  Database 133&lt;/li&gt;
&lt;li&gt;Pretty •github.com/kr/pretty •pretty.Println(X,Y,Z) 134&lt;/li&gt;
&lt;li&gt;MongoDB •Open Source •Document Database •Document == Struct or Document == Map •Works seamlessly with Go (and other languages) 135&lt;/li&gt;
&lt;li&gt;MongoDB •Fast &amp;amp; Scalable •Used by Disney, IBM, Metlife, eBay, Forbes, Craigslist, Cisco, Stripe 136&lt;/li&gt;
&lt;li&gt;Mgo •Developed by the open source community •Heavily used throughout Go community •&amp;quot;mgo is the best database driver I&amp;#39;ve ever used.&amp;quot;  — Patrick Crosby, Founder of StatHat •&amp;quot;mgo and Go are a pair made in heaven.  — Brian Ketelsen, Author of GopherTimes.com137&lt;/li&gt;
&lt;li&gt;go get -u gopkg.in/mgo.v2 Getting  mgo 138&lt;/li&gt;
&lt;li&gt;boilerplate  stuff 139&lt;/li&gt;
&lt;li&gt;// Copyright &amp;#169; 2014 Steve Francia &amp;lt;spf@spf13.com&amp;gt;. // // Use of this source code is governed by an Apache2 // license that can be found in the LICENSE file. ! package commands ! import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; ! &amp;quot;github.com/spf13/viper&amp;quot; &amp;quot;gopkg.in/mgo.v2&amp;quot; ) ! var mongodbSession *mgo.Session ! func init() { RootCmd.PersistentFlags().String(&amp;quot;mongodb_uri&amp;quot;, &amp;quot;localhost&amp;quot;, &amp;quot;host where mongoDB is&amp;quot;) viper.BindPFlag(&amp;quot;mongodb_uri&amp;quot;, RootCmd.PersistentFlags().Lookup(“mongodb_uri&amp;quot;)) CreateUniqueIndexes() } MongoDB.go  (1) 140&lt;/li&gt;
&lt;li&gt;Setting  up  a   DB  session 141&lt;/li&gt;
&lt;li&gt;func DBSession() *mgo.Session { if mongodbSession == nil { uri := os.Getenv(&amp;quot;MONGODB_URI&amp;quot;) if uri == &amp;quot;&amp;quot; { uri = viper.GetString(&amp;quot;mongodb_uri&amp;quot;) ! if uri == &amp;quot;&amp;quot; { log.Fatalln(&amp;quot;No connection uri for MongoDB provided&amp;quot;) } } ! var err error mongodbSession, err = mgo.Dial(uri) if mongodbSession == nil || err != nil { log.Fatalf(&amp;quot;Can&amp;#39;t connect to mongo, go error %vn&amp;quot;, err) } ! mongodbSession.SetSafe(&amp;amp;mgo.Safe{}) } return mongodbSession } MongoDB.go  (2) 142&lt;/li&gt;
&lt;li&gt;setting  up   some   shortcuts 143&lt;/li&gt;
&lt;li&gt;! func DB() *mgo.Database { return DBSession().DB(viper.GetString(&amp;quot;dbname&amp;quot;)) } ! func Items() *mgo.Collection { return DB().C(&amp;quot;items&amp;quot;) } ! func Channels() *mgo.Collection { return DB().C(&amp;quot;channels&amp;quot;) } MongoDB.go  (3) 144&lt;/li&gt;
&lt;li&gt;Setting  up   indexes 145&lt;/li&gt;
&lt;li&gt;func CreateUniqueIndexes() { idx := mgo.Index{ Key: []string{&amp;quot;key&amp;quot;}, Unique: true, DropDups: true, Background: true, Sparse: true, } ! if err := Items().EnsureIndex(idx); err != nil { fmt.Println(err) } ! if err := Channels().EnsureIndex(idx); err != nil { fmt.Println(err) } } MongoDB.go  (4) 146&lt;/li&gt;
&lt;li&gt;Preparing   the  data 147&lt;/li&gt;
&lt;li&gt;Data  Prep •Feeds are dirty •Go doesn’t allow “patching” of structs (not how structs work) •MongoDB works with native types &amp;amp; named types 148&lt;/li&gt;
&lt;li&gt;Tags  (Annotations) •String literal following a field declaration •Provides additional information during reflection •Used by JSON, BSON, YAML, etc 149&lt;/li&gt;
&lt;li&gt;for  x,y  :=  range •Provides a way to iterate over an array, slice, string, map, or channel. •Like Foreach or Each in other languages •x is key, y is value… can ignore by setting to _ 150&lt;/li&gt;
&lt;li&gt;Append •Append is really awesome, feels like push, but does a lot more. •Append will grow a slice (both length &amp;amp; capacity) •… and copy the underlying array if needed 151&lt;/li&gt;
&lt;li&gt;type Itm struct { Date time.Time Key string ChannelKey string Title string FullContent string Links []*rss.Link Description string Author rss.Author Categories []*rss.Category Comments string Enclosures []*rss.Enclosure Guid *string &lt;code&gt;bson:&amp;amp;quot;,omitempty&amp;amp;quot;&lt;/code&gt; Source *rss.Source PubDate string Id string &lt;code&gt;bson:&amp;amp;quot;,omitempty&amp;amp;quot;&lt;/code&gt; Generator *rss.Generator Contributors []string Content *rss.Content Extensions map[string]map[string][]rss.Extension } fetch.go 152&lt;/li&gt;
&lt;li&gt;func itmify(o *rss.Item, ch *rss.Channel) Itm { var x Itm x.Title = o.Title x.Links = o.Links x.ChannelKey = ch.Key() x.Description = o.Description x.Author = o.Author x.Categories = o.Categories x.Comments = o.Comments x.Enclosures = o.Enclosures x.Guid = o.Guid x.PubDate = o.PubDate x.Id = o.Id x.Key = o.Key() x.Generator = o.Generator x.Contributors = o.Contributors x.Content = o.Content x.Extensions = o.Extensions x.Date, _ = o.ParsedPubDate() ! if o.Content != nil &amp;amp;&amp;amp; o.Content.Text != &amp;quot;&amp;quot; { x.FullContent = o.Content.Text } else { x.FullContent = o.Description } ! return x } fetch.go 153&lt;/li&gt;
&lt;li&gt;type Chnl struct { Key string Title string Links []rss.Link Description string Language string Copyright string ManagingEditor string WebMaster string PubDate string LastBuildDate string Docs string Categories []*rss.Category Generator rss.Generator TTL int Rating string SkipHours []int SkipDays []int Image rss.Image ItemKeys []string Cloud rss.Cloud TextInput rss.Input Extensions map[string]map[string] []rss.Extension Id string Rights string Author rss.Author SubTitle rss.SubTitle } fetch.go 154&lt;/li&gt;
&lt;li&gt;func chnlify(o *rss.Channel) Chnl { var x Chnl x.Key = o.Key() x.Title = o.Title x.Links = o.Links x.Description = o.Description x.Language = o.Language x.Copyright = o.Copyright x.ManagingEditor = o.ManagingEditor x.WebMaster = o.WebMaster x.PubDate = o.PubDate x.LastBuildDate = o.LastBuildDate x.Docs = o.Docs x.Categories = o.Categories x.Generator = o.Generator x.TTL = o.TTL x.Rating = o.Rating x.SkipHours = o.SkipHours x.SkipDays = o.SkipDays x.Image = o.Image x.Cloud = o.Cloud x.TextInput = o.TextInput x.Extensions = o.Extensions x.Id = o.Id x.Rights = o.Rights x.Author = o.Author x.SubTitle = o.SubTitle ! &amp;hellip; ! return x } fetch.go 155&lt;/li&gt;
&lt;li&gt;&amp;hellip; ! ! var keys []string for _, y := range o.Items { keys = append(keys, y.Key()) } x.ItemKeys = keys ! &amp;hellip; fetch.go 156&lt;/li&gt;
&lt;li&gt;Storing   Feeds  &amp;amp;   Items 157&lt;/li&gt;
&lt;li&gt;The  Blank  Identifier  ‘_’ •Used to ignore return values from a function •Used with imports as an alias • Allows import of unused packages so init functions can be executed 158&lt;/li&gt;
&lt;li&gt;func chanHandler(feed *rss.Feed, newchannels []*rss.Channel) { fmt.Printf(&amp;quot;%d new channel(s) in %sn&amp;quot;, len(newchannels), feed.Url) for _, ch := range newchannels { chnl := chnlify(ch) if err := Channels().Insert(chnl); err != nil { if !strings.Contains(err.Error(), &amp;quot;E11000&amp;quot;) { fmt.Printf(&amp;quot;Database error. Err: %v&amp;quot;, err) } } } } fetch.go 159&lt;/li&gt;
&lt;li&gt;func itemHandler(feed *rss.Feed, ch *rss.Channel, newitems []*rss.Item) { fmt.Printf(&amp;quot;%d new item(s) in %sn&amp;quot;, len(newitems), feed.Url) for _, item := range newitems { itm := itmify(item, ch) if err := Items().Insert(itm); err != nil { if !strings.Contains(err.Error(), &amp;quot;E11000&amp;quot;) { fmt.Printf(&amp;quot;Database error. Err: %v&amp;quot;, err) } } } } fetch.go 160&lt;/li&gt;
&lt;li&gt;Running   MongoDB 161&lt;/li&gt;
&lt;li&gt;❯ mongod    MongoDB starting : pid=51054 port=27017 dbpath=/data/db Running  MongoDB 162&lt;/li&gt;
&lt;li&gt;❯ mongo        Mongo  Shell 163&lt;/li&gt;
&lt;li&gt;❯ go run dagobah.go fetch &amp;ndash;rsstimeout=1    15 new item(s) in &lt;a href=&#34;http://spf13.com/index.xml &#34;&gt;http://spf13.com/index.xml &lt;/a&gt; 1 new channel(s) in &lt;a href=&#34;http://spf13.com/index.xml &#34;&gt;http://spf13.com/index.xml &lt;/a&gt; Sleeping for 300 seconds on &lt;a href=&#34;http://spf13.com/index.xml &#34;&gt;http://spf13.com/index.xml &lt;/a&gt; 25 new item(s) in &lt;a href=&#34;http://www.goinggo.net/feeds/posts/default &#34;&gt;http://www.goinggo.net/feeds/posts/default &lt;/a&gt; 1 new channel(s) in &lt;a href=&#34;http://www.goinggo.net/feeds/posts/default &#34;&gt;http://www.goinggo.net/feeds/posts/default &lt;/a&gt; Sleeping for 300 seconds on &lt;a href=&#34;http://www.goinggo.net/feeds/posts/&#34;&gt;http://www.goinggo.net/feeds/posts/&lt;/a&gt; default  10 new item(s) in &lt;a href=&#34;http://dave.cheney.net/feed &#34;&gt;http://dave.cheney.net/feed &lt;/a&gt; 1 new channel(s) in &lt;a href=&#34;http://dave.cheney.net/feed &#34;&gt;http://dave.cheney.net/feed &lt;/a&gt; Sleeping for 299 seconds on &lt;a href=&#34;http://dave.cheney.net/feed &#34;&gt;http://dave.cheney.net/feed &lt;/a&gt; Running  planet 164&lt;/li&gt;
&lt;li&gt;&amp;gt; use dagobah &amp;gt; db.items.findOne() { &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;53b4c08bddbc460a933cf3ed&amp;quot;), &amp;quot;date&amp;quot; : ISODate(&amp;quot;2014-07-01T00:00:00Z&amp;quot;), &amp;quot;key&amp;quot; : &amp;quot;&lt;a href=&#34;http://spf13.com/post/go-pointers-vs-references&amp;quot;&#34;&gt;http://spf13.com/post/go-pointers-vs-references&amp;quot;&lt;/a&gt;, &amp;quot;channelkey&amp;quot; : &amp;quot;Recent Content on Hacking Management&amp;quot;, &amp;quot;title&amp;quot; : &amp;quot;Pointers vs References&amp;quot;, &amp;quot;links&amp;quot; : [ { &amp;quot;href&amp;quot; : &amp;quot;&lt;a href=&#34;http://spf13.com/post/go-pointers-vs-references&amp;quot;&#34;&gt;http://spf13.com/post/go-pointers-vs-references&amp;quot;&lt;/a&gt;, &amp;quot;rel&amp;quot; : &amp;quot;&amp;quot;, &amp;quot;type&amp;quot; : &amp;quot;&amp;quot;, &amp;quot;hreflang&amp;quot; : &amp;quot;&amp;quot; Looking  at  the  Data 165&lt;/li&gt;
&lt;li&gt;_ID •MongoDB’s primary key •Default is to use an “object_id” •Object_id guaranteed to be unique across your entire cluster •MongoDB will create it for you on insert 166&lt;/li&gt;
&lt;li&gt;Tweet  Break Feeding mgo at #OSCON with @spf13 &lt;a href=&#34;http://j.mp/mongomgo&#34;&gt;http://j.mp/mongomgo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https:// github.com/spf13/ firstGoApp- Planet/tree/ step4 168&lt;/li&gt;
&lt;li&gt;Step  5     Building  a    web  Server 169&lt;/li&gt;
&lt;li&gt;Lots  of  choices •Beego  High-performance web framework •Gin  Martini like with better performance •Goji  A minimalistic web framework •Gorilla   A web toolkit •httprouter  A high performance router •Mango   modular web-app framework like Rack •Martini   modular web apps &amp;amp; services •net/http  Standard library web package •pat  Sinatra style, by the author of Sinatra. •Revel  A high-productivity web framework •tigertonic  framework for JSON web services •traffic  Sinatra inspired web framework for Go •web.go  A simple framework to write webapps in Go. 170&lt;/li&gt;
&lt;li&gt;Gin •Compatible with net/http •Uses Httprouter (really fast) •Familiar/Friendly Interface •Works well with JSON •Had to pick something 171&lt;/li&gt;
&lt;li&gt;go get -u  github.com/gin-gonic/gin Getting  Gin 172&lt;/li&gt;
&lt;li&gt;boilerplate    stuff 173&lt;/li&gt;
&lt;li&gt;// Copyright &amp;#169; 2014 Steve Francia. // // Use of this source code is governed by an Apache2 // license that can be found in the LICENSE file. ! package commands ! import ( &amp;quot;github.com/gin-gonic/gin&amp;quot; &amp;quot;github.com/spf13/cobra&amp;quot; &amp;quot;github.com/spf13/viper&amp;quot; ) Server.Go  (1) 174&lt;/li&gt;
&lt;li&gt;Defining  the   Server   command 175&lt;/li&gt;
&lt;li&gt;var serverCmd = &amp;amp;cobra.Command{ Use: &amp;quot;server&amp;quot;, Short: &amp;quot;Server for feeds&amp;quot;, Long: &lt;code&gt;Dagobah will serve all feeds listed in the config file.&lt;/code&gt;, Run: serverRun, } ! func init() { serverCmd.Flags().Int(&amp;quot;port&amp;quot;, 1138, &amp;quot;Port to run Dagobah server on&amp;quot;) viper.BindPFlag(&amp;quot;port&amp;quot;, serverCmd.Flags().Lookup(&amp;quot;port&amp;quot;)) } server.go  (2) 176&lt;/li&gt;
&lt;li&gt;func addCommands() { RootCmd.AddCommand(fetchCmd) RootCmd.AddCommand(serverCmd) } planet.go 177&lt;/li&gt;
&lt;li&gt;Defining  our   first  route 178&lt;/li&gt;
&lt;li&gt;func serverRun(cmd *cobra.Command, args []string) { r := gin.Default() ! r.GET(&amp;quot;/ping&amp;quot;, func(c *gin.Context) { c.String(200, &amp;quot;pong&amp;quot;) }) ! port := viper.GetString(&amp;quot;port&amp;quot;) fmt.Println(&amp;quot;Running on port:&amp;quot;, port) r.Run(&amp;quot;:&amp;quot; + port) } server.go  (3) 179&lt;/li&gt;
&lt;li&gt;❯ go run dagobah.go server Running  it 180&lt;/li&gt;
&lt;li&gt;Check  it  out &lt;a href=&#34;http://localhost:1138&#34;&gt;http://localhost:1138&lt;/a&gt; 181&lt;/li&gt;
&lt;li&gt;Tweet  Break I wrote a webserver in go using Gin   with @spf13 at #OSCON &lt;a href=&#34;http://j.mp/gin-go&#34;&gt;http://j.mp/gin-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https:// github.com/spf13/ firstGoApp- Planet/tree/ step5 183&lt;/li&gt;
&lt;li&gt;Step  6     Building  a    Dynamic  Server 184&lt;/li&gt;
&lt;li&gt;Binary  Problem? •Go ships as a single binary •Need to load files from within the binary •Don’t want to embed by hand 185&lt;/li&gt;
&lt;li&gt;go.rice •Nicely allows local loads in dev, and embedded loads when executing binary •Stable, but not very mature yet •Best option I know of 186&lt;/li&gt;
&lt;li&gt;go get -u   github.com/GeertJohan/ go.rice Getting  Go.Rice 187&lt;/li&gt;
&lt;li&gt;Serving   Static  Files 188&lt;/li&gt;
&lt;li&gt;Get  your   static  &amp;amp;   templates  on c.spf13.com/OSCON/step6-static.zip 189&lt;/li&gt;
&lt;li&gt;import ( &amp;quot;fmt&amp;quot; &amp;quot;html/template&amp;quot; &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ! &amp;quot;github.com/GeertJohan/go.rice&amp;quot; &amp;quot;github.com/gin-gonic/gin&amp;quot; &amp;quot;github.com/spf13/cobra&amp;quot; &amp;quot;github.com/spf13/viper&amp;quot; ) server.go 190&lt;/li&gt;
&lt;li&gt;func serverRun(cmd *cobra.Command, args []string) { &amp;hellip;  r.GET(&amp;quot;/static/*filepath&amp;quot;, staticServe) ! port := viper.GetString(&amp;quot;port&amp;quot;) fmt.Println(&amp;quot;Running on port:&amp;quot;, port) r.Run(&amp;quot;:&amp;quot; + port) } server.go 191&lt;/li&gt;
&lt;li&gt;func staticServe(c *gin.Context) { static, err := rice.FindBox(&amp;quot;static&amp;quot;) if err != nil { log.Fatal(err) } ! original := c.Request.URL.Path c.Request.URL.Path = c.Params.ByName(&amp;quot;filepath&amp;quot;) fmt.Println(c.Params.ByName(&amp;quot;filepath&amp;quot;)) http.FileServer(static.HTTPBox()).ServeHTTP(c.Writer, c.Request) c.Request.URL.Path = original } server.go 192&lt;/li&gt;
&lt;li&gt;Loading  &amp;amp;   Serving     Templates 193&lt;/li&gt;
&lt;li&gt;func loadTemplates(list &amp;hellip;string) *template.Template { templateBox, err := rice.FindBox(&amp;quot;templates&amp;quot;) if err != nil { log.Fatal(err) } templates := template.New(&amp;quot;&amp;quot;) ! for _, x := range list { templateString, err := templateBox.String(x) if err != nil { log.Fatal(err) } ! // get file contents as string _, err = templates.New(x).Parse(templateString) if err != nil { log.Fatal(err) } } return templates } server.go 194&lt;/li&gt;
&lt;li&gt;func serverRun(cmd *cobra.Command, args []string) { r := gin.Default() templates := loadTemplates(&amp;quot;full.html&amp;quot;) r.SetHTMLTemplate(templates) ! r.GET(&amp;quot;/ping&amp;quot;, func(c *gin.Context) { c.String(200, &amp;quot;pong&amp;quot;) }) ! r.GET(&amp;quot;/&amp;quot;, homeRoute) r.GET(&amp;quot;/static/*filepath&amp;quot;, staticServe)  ! port := viper.GetString(&amp;quot;port&amp;quot;) fmt.Println(&amp;quot;Running on port:&amp;quot;, port) r.Run(&amp;quot;:&amp;quot; + port) } server.go 195&lt;/li&gt;
&lt;li&gt;func homeRoute(c *gin.Context) { obj := gin.H{&amp;quot;title&amp;quot;: &amp;quot;Go Rules&amp;quot;} c.HTML(200, “full.html&amp;quot;, obj) } server.go 196&lt;/li&gt;
&lt;li&gt;❯ go run dagobah.go server Running  it 197&lt;/li&gt;
&lt;li&gt;Check  it  out &lt;a href=&#34;http://localhost:1138&#34;&gt;http://localhost:1138&lt;/a&gt; 198&lt;/li&gt;
&lt;li&gt;Tweet  Break No more mr rice guy   with @spf13 at #OSCON &lt;a href=&#34;http://j.mp/go-rice&#34;&gt;http://j.mp/go-rice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https:// github.com/spf13/ firstGoApp- Planet/tree/ step6 200&lt;/li&gt;
&lt;li&gt;Step  7     Connecting  the  Data   to  The  templates 201&lt;/li&gt;
&lt;li&gt;Go  Templates •Really nice to work with •Very simple, yet very powerful •Safe •Go Template Primer 202&lt;/li&gt;
&lt;li&gt;Understanding    the  data 203&lt;/li&gt;
&lt;li&gt;&amp;gt; db.items.find().sort({ &amp;quot;date&amp;quot; : -1 }).limit(1).pretty() { &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;53b4c08bddbc460a933cf3ed&amp;quot;), &amp;quot;date&amp;quot; : ISODate(&amp;quot;2014-07-01T00:00:00Z&amp;quot;), &amp;quot;key&amp;quot; : &amp;quot;&lt;a href=&#34;http://spf13.com/post/go-pointers-vs-references&amp;quot;&#34;&gt;http://spf13.com/post/go-pointers-vs-references&amp;quot;&lt;/a&gt;, &amp;quot;channelkey&amp;quot; : &amp;quot;Recent Content on Hacking Management&amp;quot;, &amp;quot;title&amp;quot; : &amp;quot;Pointers vs References&amp;quot;, &amp;quot;links&amp;quot; : [ { &amp;quot;href&amp;quot; : &amp;quot;&lt;a href=&#34;http://spf13.com/post/go-pointers-vs-references&amp;quot;&#34;&gt;http://spf13.com/post/go-pointers-vs-references&amp;quot;&lt;/a&gt;, &amp;quot;rel&amp;quot; : &amp;quot;&amp;quot;, &amp;quot;type&amp;quot; : &amp;quot;&amp;quot;, &amp;quot;hreflang&amp;quot; : &amp;quot;&amp;quot; } Looking  at  the  Schema 204&lt;/li&gt;
&lt;li&gt;Listing  POsts 205&lt;/li&gt;
&lt;li&gt;passing  data     into  the  template •Go’s templates accept a variety of data types •Gin’s default is ‘H’ : map[string]interface{} •Feels natural •All (exported) methods bound to values in the map are accessible inside the template 206&lt;/li&gt;
&lt;li&gt;func homeRoute(c *gin.Context) { var posts []Itm results := Items().Find(bson.M{}).Sort(&amp;quot;-date&amp;quot;).Limit(20) results.All(&amp;amp;posts) ! obj := gin.H{&amp;quot;title&amp;quot;: &amp;quot;Go Rules&amp;quot;, &amp;quot;posts&amp;quot;: posts} c.HTML(200, &amp;quot;full.html&amp;quot;, obj) } server.go 207&lt;/li&gt;
&lt;li&gt;&amp;hellip; &amp;lt;section id=&amp;quot;latest-list&amp;quot; class=&amp;quot;ui divided inbox selection list active tab&amp;quot; data-tab=&amp;quot;recent&amp;quot;&amp;gt; {{ range $item := .posts }} {{ if $item.WorthShowing }} &amp;lt;a class=&amp;quot;item&amp;quot; href=“#{{$item.Key | urlquery }}&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;{{ $item.Title }}&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;right floated ui label small&amp;quot;&amp;gt;{{ $item.Date.Format &amp;quot;Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt; &amp;lt;/a&amp;gt; {{ end }} {{ end }} &amp;lt;/section&amp;gt; &amp;hellip; Full.html 208&lt;/li&gt;
&lt;li&gt;Adding  Helpers    to  itm 209&lt;/li&gt;
&lt;li&gt;func (i Itm) FirstLink() (link rss.Link) { if len(i.Links) == 0 || i.Links[0] == nil { return } return *i.Links[0] } ! func (i Itm) WorthShowing() bool { if len(i.FullContent) &amp;gt; 100 { return true } return false } fetch.go 210&lt;/li&gt;
&lt;li&gt;displaying  POsts 211&lt;/li&gt;
&lt;li&gt;&amp;hellip; &amp;lt;main&amp;gt; {{ with .message}}! &amp;lt;h1 class=&amp;quot;ui header large&amp;quot;&amp;gt; {{.}} &amp;lt;/h1&amp;gt;! {{ end }}! ! {{ range $item := .posts }}! {{ if $item.WorthShowing }}! &amp;lt;article data-key=&amp;quot;{{$item.Key}}&amp;quot;&amp;gt;! &amp;lt;header&amp;gt;! &amp;lt;a name=&amp;quot;{{$item.Key}}&amp;quot;&amp;gt;! &amp;lt;h1 class=&amp;quot;ui header&amp;quot;&amp;gt;{{$item.Title}}&amp;lt;/h1&amp;gt;! &amp;lt;section class=&amp;quot;meta-tags&amp;quot;&amp;gt;! &amp;lt;a class=&amp;quot;ui label large blue author&amp;quot; href=&amp;quot;/channel/{{$item.ChannelKey}}&amp;quot;&amp;gt;{{$item.Author.Name}}&amp;lt;/a&amp;gt;! &amp;lt;span class=&amp;quot;large ui label date&amp;quot;&amp;gt;{{ $item.Date.Format &amp;quot;Jan 2, 2006&amp;quot; }}&amp;lt;/span&amp;gt;! &amp;lt;/section&amp;gt;! &amp;lt;/header&amp;gt;! &amp;lt;section class=&amp;quot;main-content&amp;quot;&amp;gt;! {{$item.FullContent | html }}! &amp;lt;/section&amp;gt;! &amp;lt;footer&amp;gt;! {{with $item.FirstLink}}! &amp;lt;a class=&amp;quot;ui basic button&amp;quot; href=&amp;quot;{{.Href}}&amp;quot;&amp;gt;Source&amp;lt;/a&amp;gt;! {{end}}! &amp;lt;div class=&amp;quot;ui divider&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;! &amp;lt;/footer&amp;gt;! &amp;lt;/article&amp;gt;! {{ end }}! {{ else }}! No Articles! {{ end }}! &amp;lt;/main&amp;gt; &amp;hellip; full.html 212&lt;/li&gt;
&lt;li&gt;Adding  Template   Functions 213&lt;/li&gt;
&lt;li&gt;func loadTemplates(list &amp;hellip;string) *template.Template { templateBox, err := rice.FindBox(&amp;quot;templates&amp;quot;) if err != nil { log.Fatal(err) } ! templates := template.New(&amp;quot;&amp;quot;) ! for _, x := range list { templateString, err := templateBox.String(x) if err != nil { log.Fatal(err) } ! // get file contents as string _, err = templates.New(x).Parse(templateString) if err != nil { log.Fatal(err) } } ! funcMap := template.FuncMap{ &amp;quot;html&amp;quot;: ProperHtml, &amp;quot;title&amp;quot;: func(a string) string { return strings.Title(a) }, } ! templates.Funcs(funcMap) ! return templates } server.go 214&lt;/li&gt;
&lt;li&gt;func ProperHtml(text string) template.HTML { if strings.Contains(text, &amp;quot;content:encoded&amp;gt;&amp;quot;) || strings.Contains(text, &amp;quot;content/:encoded&amp;gt;&amp;quot;) { text = html.UnescapeString(text) } return template.HTML(html.UnescapeString(template.HTMLEscapeString(text))) } server.go 215&lt;/li&gt;
&lt;li&gt;Looking  Good &lt;a href=&#34;http://localhost:1138&#34;&gt;http://localhost:1138&lt;/a&gt; 216&lt;/li&gt;
&lt;li&gt;Tweet  Break Conquering Go Templates   with @spf13 at #OSCON&lt;/li&gt;
&lt;li&gt;https:// github.com/spf13/ firstGoApp- Planet/tree/ step7 218&lt;/li&gt;
&lt;li&gt;Step  8     More  Routes 219&lt;/li&gt;
&lt;li&gt;Adding  Helpers 220&lt;/li&gt;
&lt;li&gt;func (c Chnl) HomePage() string { if len(c.Links) == 0 { return &amp;quot;&amp;quot; } ! url, err := url.Parse(c.Links[0].Href) if err != nil { log.Println(err) } return url.Scheme + &amp;quot;://&amp;quot; + url.Host } fetch.go 221&lt;/li&gt;
&lt;li&gt;! func four04(c *gin.Context, message string) { c.HTML(404, &amp;quot;full.html&amp;quot;, gin.H{&amp;quot;message&amp;quot;: message, &amp;quot;title&amp;quot;: message}) } server.go 222&lt;/li&gt;
&lt;li&gt;func AllChannels() []Chnl { var channels []Chnl r := Channels().Find(bson.M{}).Sort(&amp;quot;-lastbuilddate&amp;quot;) r.All(&amp;amp;channels) return channels } MongoDB.go 223&lt;/li&gt;
&lt;li&gt;Listing  channels 224&lt;/li&gt;
&lt;li&gt;func homeRoute(c *gin.Context) { var posts []Itm results := Items().Find(bson.M{}).Sort(&amp;quot;-date&amp;quot;).Limit(20) results.All(&amp;amp;posts) ! obj := gin.H{&amp;quot;title&amp;quot;: &amp;quot;Go Rules&amp;quot;,   &amp;quot;posts&amp;quot;: posts, &amp;quot;channels&amp;quot;: AllChannels()} c.HTML(200, &amp;quot;full.html&amp;quot;, obj) } server.go 225&lt;/li&gt;
&lt;li&gt;&amp;hellip; &amp;lt;section id=&amp;quot;channel-list&amp;quot;   class=&amp;quot;ui large inverted vertical menu tab&amp;quot; data-tab=“channels&amp;quot;&amp;gt; &amp;lt;a class=&amp;quot;item js-navigate&amp;quot; href=&amp;quot;/&amp;quot; &amp;gt;! &amp;lt;i class=&amp;quot;external home icon&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;! &amp;lt;span class=&amp;quot;ui name&amp;quot; href=&amp;quot;&amp;quot;&amp;gt; All &amp;lt;/span&amp;gt;! &amp;lt;/a&amp;gt;! {{ range $channel := .channels }}! &amp;lt;div class=&amp;quot;item js-navigate-channel&amp;quot; data-href=&amp;quot;/channel/{{$channel.Key}}&amp;quot;   data-key=&amp;quot;{{$channel.Key}}&amp;quot; style=&amp;quot;cursor:pointer;&amp;quot;&amp;gt;! &amp;lt;a href=&amp;quot;{{$channel.HomePage}}&amp;quot; class=&amp;quot;ui float right&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;external url sign icon&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;! &amp;lt;span class=&amp;quot;ui name&amp;quot; href=&amp;quot;&amp;quot;&amp;gt; {{$channel.Title}} &amp;lt;/span&amp;gt;! &amp;lt;span class=&amp;quot;ui label&amp;quot;&amp;gt;{{ len $channel.Links }}&amp;lt;/span&amp;gt;! &amp;lt;/div&amp;gt;! {{end}}! &amp;lt;/section&amp;gt; &amp;hellip; full.html 226&lt;/li&gt;
&lt;li&gt;displaying   channels 227&lt;/li&gt;
&lt;li&gt;func serverRun(cmd *cobra.Command, args []string) { &amp;hellip; r.GET(&amp;quot;/channel/*key&amp;quot;, channelRoute) r.Run(&amp;quot;:&amp;quot; + port) } server.go 228&lt;/li&gt;
&lt;li&gt;func channelRoute(c *gin.Context) { key := c.Params.ByName(&amp;quot;key&amp;quot;) if len(key) &amp;lt; 2 { four04(c, &amp;quot;Channel Not Found&amp;quot;) return } ! key = key[1:] ! fmt.Println(key) ! var posts []Itm results := Items().Find(bson.M{&amp;quot;channelkey&amp;quot;: key}).Sort(&amp;quot;-date&amp;quot;).Limit(20) results.All(&amp;amp;posts) ! if len(posts) == 0 { four04(c, &amp;quot;No Articles&amp;quot;) return } &amp;hellip; server.go  -  pt  1 229&lt;/li&gt;
&lt;li&gt;&amp;hellip;  var currentChannel Chnl err := Channels().Find(bson.M{&amp;quot;key&amp;quot;: key}).One(&amp;amp;currentChannel) if err != nil { if string(err.Error()) == &amp;quot;not found&amp;quot; { four04(c, &amp;quot;Channel not found&amp;quot;) return } else { fmt.Println(err) } } ! obj := gin.H{&amp;quot;title&amp;quot;: currentChannel.Title, &amp;quot;header&amp;quot;: currentChannel.Title, &amp;quot;posts&amp;quot;: posts, &amp;quot;channels&amp;quot;: AllChannels()} ! c.HTML(200, &amp;quot;full.html&amp;quot;, obj) } server.go  -  pt  2 230&lt;/li&gt;
&lt;li&gt;displaying    A  post 231&lt;/li&gt;
&lt;li&gt;func serverRun(cmd *cobra.Command, args []string) { &amp;hellip; r.GET(&amp;quot;/post/*key&amp;quot;, channelRoute) r.Run(&amp;quot;:&amp;quot; + port) } server.go 232&lt;/li&gt;
&lt;li&gt;func postRoute(c *gin.Context) { key := c.Params.ByName(&amp;quot;key&amp;quot;) ! if len(key) &amp;lt; 2 { four04(c, &amp;quot;Invalid Post&amp;quot;) return } ! key = key[1:] ! var ps []Itm r := Items().Find(bson.M{&amp;quot;key&amp;quot;: key}).Sort(&amp;quot;-date&amp;quot;).Limit(1) r.All(&amp;amp;ps) ! if len(ps) == 0 { four04(c, &amp;quot;Post not found&amp;quot;) return } &amp;hellip; server.go  -  Pt  1 233&lt;/li&gt;
&lt;li&gt;&amp;hellip;  ! var posts []Itm results := Items().Find(bson.M{&amp;quot;date&amp;quot;: bson.M{&amp;quot;$lte&amp;quot;: ps[0].Date}}).Sort(&amp;quot;-date&amp;quot;).Limit(20) results.All(&amp;amp;posts) ! obj := gin.H{&amp;quot;title&amp;quot;: ps[0].Title, &amp;quot;posts&amp;quot;: posts, &amp;quot;channels&amp;quot;: AllChannels()} ! c.HTML(200, &amp;quot;full.html&amp;quot;, obj) } server.go  -  Pt  2 234&lt;/li&gt;
&lt;li&gt;Looking  Good &lt;a href=&#34;http://localhost:1138&#34;&gt;http://localhost:1138&lt;/a&gt; 235&lt;/li&gt;
&lt;li&gt;Tweet  Break Making my own planet in #go with @spf13  at #OSCON &lt;a href=&#34;http://j.mp/go-planet&#34;&gt;http://j.mp/go-planet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https:// github.com/spf13/ firstGoApp- Planet/tree/ step8 237&lt;/li&gt;
&lt;li&gt;Step  9     Advanced  Routes 238&lt;/li&gt;
&lt;li&gt;Congrats •You’ve made it really far •Now the training wheels are off •Let’s try to add pagination &amp;amp; search 240&lt;/li&gt;
&lt;li&gt;Hints •You will need a new index •We’re talking full text here •You will also need a new route 241&lt;/li&gt;
&lt;li&gt;&amp;hellip; r.GET(&amp;quot;/&amp;quot;, homeRoute) r.GET(&amp;quot;/post/*key&amp;quot;, postRoute) r.GET(&amp;quot;/search/*query&amp;quot;, searchRoute) r.GET(&amp;quot;/static/*filepath&amp;quot;, staticServe) r.GET(&amp;quot;/channel/*key&amp;quot;, channelRoute) &amp;hellip; server.go 242&lt;/li&gt;
&lt;li&gt;Step  10   ! Add  Polish 243&lt;/li&gt;
&lt;li&gt;What’s  next  ? •Add ‘truncate’ command to remove old posts and channels •Change root command to run fetcher &amp;amp; server •Add infinite scroll capabilities 244&lt;/li&gt;
&lt;li&gt;What’s  next  ? •Make it so users can provide their own static files &amp;amp; templates •Documentation •Blog posts 245&lt;/li&gt;
&lt;li&gt;In  Conclusion 246 Go mascot designed by Ren&amp;#233;e French and copyrighted under the Creative Commons Attribution 3.0 license.&lt;/li&gt;
&lt;li&gt;Thank  yOU 247&lt;/li&gt;
&lt;li&gt;What  have  we  done  ? •Written our first lines of Go •Written our first Go package •Written our own web server •Written our first Go application •Learned a lot &amp;amp; had fun doing it 248&lt;/li&gt;
&lt;li&gt;@spf13 •Author of Hugo, Cobra, Viper &amp;amp; More •Chief Developer Advocate for MongoDB •Gopher 249&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>spf13-vim : Steve Francia&#39;s Vim Distribution</title>
      <link>http://zhash.github.io/project/spf13-vim/</link>
      <pubDate>Tue, 10 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://zhash.github.io/project/spf13-vim/</guid>
      <description>

&lt;p&gt;spf13-vim is a distribution of vim plugins and resources for Vim, Gvim and &lt;a href=&#34;http://code.google.com/p/macvim/&#34;&gt;MacVim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is a good starting point for anyone intending to use VIM for development running equally well on Windows, Linux, *nix and Mac.&lt;/p&gt;

&lt;p&gt;The distribution is completely customisable using a &lt;code&gt;~/.vimrc.local&lt;/code&gt; and &lt;code&gt;~/.vimrc.bundles.local&lt;/code&gt; Vim RC files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/UKToY.png&#34; alt=&#34;spf13-vim image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Unlike traditional VIM plugin structure, which similar to UNIX throws all files into common directories, making updating or disabling plugins a real mess, spf13-vim 3 uses the &lt;a href=&#34;http://github.com/gmarik/vundle&#34;&gt;Vundle&lt;/a&gt; plugin management system to have a well organized vim directory (Similar to mac&amp;rsquo;s app folders). Vundle also ensures that the latest versions of your plugins are installed and makes it easy to keep them up to date.&lt;/p&gt;

&lt;p&gt;Great care has been taken to ensure that each plugin plays nicely with others, and optional configuration has been provided for what we believe is the most efficient use.&lt;/p&gt;

&lt;p&gt;Lastly (and perhaps, most importantly) It is completely cross platform. It works well on Windows, Linux and OSX without any modifications or additional configurations. If you are using &lt;a href=&#34;http://code.google.com/p/macvim/&#34;&gt;MacVim&lt;/a&gt; or Gvim additional features are enabled. So regardless of your environment just clone and run.&lt;/p&gt;

&lt;h1 id=&#34;spf13-vim-3-0:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;spf13-vim 3.0&lt;/h1&gt;

&lt;p&gt;January 2012 spf13-vim released it&amp;rsquo;s third major iteration. &lt;strong&gt;This is important as it requires a reinstall&lt;/strong&gt;, but trust me it&amp;rsquo;s worth it.&lt;/p&gt;

&lt;p&gt;The biggest change is the switch from using git submodules to using the excellent &lt;a href=&#34;http://github.com/gmarik/vundle&#34;&gt;Vundle&lt;/a&gt; system. While git submodules seemed like a good idea at the time, it wasn&amp;rsquo;t. It was always problematic. Additionally because a submodule points to a refspec and not a branch, it was a constant maintenance nightmare to keep everything up to date.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/gmarik/vundle&#34;&gt;Vundle&lt;/a&gt; has an excellent system built on the same principles as Pathogen, but with an integrated plugin management system that is Git and Github aware.&lt;/p&gt;

&lt;p&gt;We have also changed out most of the plugins in favor of newer more stable alternatives. Additionally we have significantly reduced the number of plugins requiring python or ruby.&lt;/p&gt;

&lt;p&gt;The goal has always been to add functionality without changing all the features, functionality and keystrokes we all love. Using spf13-vim we&amp;rsquo;ve kept all the default behaviors (by and large), so if you ever find yourself on a vanilla environment you&amp;rsquo;ll feel right at home.&lt;/p&gt;

&lt;h1 id=&#34;installation:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Installation&lt;/h1&gt;

&lt;h2 id=&#34;linux-nix-mac-osx-installation:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Linux, *nix, Mac OSX Installation&lt;/h2&gt;

&lt;p&gt;The easiest way to install spf13-vim is to use our &lt;a href=&#34;http://j.mp/spf13-vim3&#34;&gt;automatic installer&lt;/a&gt; by simply copying and pasting the following line into a terminal. This will install spf13-vim and backup your existing vim configuration. If you are upgrading from a prior version (before 3.0) this is also the recommended installation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    
    curl http://j.mp/spf13-vim3 -L &amp;gt; spf13-vim.sh &amp;amp;&amp;amp; sh spf13-vim.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have a bash-compatible shell you can run the script directly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
    sh &amp;lt;(curl http://j.mp/spf13-vim3 -L)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-on-windows:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Installing on Windows&lt;/h2&gt;

&lt;p&gt;On Windows and *nix &lt;a href=&#34;http://git-scm.com&#34;&gt;Git&lt;/a&gt; and &lt;a href=&#34;http://curl.haxx.se&#34;&gt;Curl&lt;/a&gt; are required. Also, if you haven&amp;rsquo;t already, you&amp;rsquo;ll need to install &lt;a href=&#34;http://www.vim.org/download.php#pc&#34;&gt;Vim&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;installing-dependencies:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Installing dependencies&lt;/h3&gt;

&lt;h4 id=&#34;install-msysgit:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Install &lt;a href=&#34;http://code.google.com/p/msysgit&#34;&gt;msysgit&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;After installation try running &lt;code&gt;git --version&lt;/code&gt; within &lt;em&gt;command prompt&lt;/em&gt; (press Win-R,  type &lt;code&gt;cmd&lt;/code&gt;, press Enter) to make sure all good:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\&amp;gt; git --version
git version 1.7.4.msysgit.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;setup-curl:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Setup &lt;a href=&#34;http://curl.haxx.se&#34;&gt;Curl&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Instructions blatently copied from vundle readme&lt;/em&gt;
Installing Curl on Windows is easy as &lt;a href=&#34;http://curl.haxx.se&#34;&gt;Curl&lt;/a&gt; is bundled with &lt;a href=&#34;http://code.google.com/p/msysgit&#34;&gt;msysgit&lt;/a&gt;!
But before it can be used with &lt;a href=&#34;http://github.com/gmarik/vundle&#34;&gt;Vundle&lt;/a&gt; it&amp;rsquo;s required make &lt;code&gt;curl&lt;/code&gt; run in &lt;em&gt;command prompt&lt;/em&gt;.
The easiest way is to create &lt;code&gt;curl.cmd&lt;/code&gt; with &lt;a href=&#34;https://gist.github.com/912993&#34;&gt;this content&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@rem Do not use &amp;quot;echo off&amp;quot; to not affect any child calls.
@setlocal

@rem Get the abolute path to the parent directory, which is assumed to be the
@rem Git installation root.
@for /F &amp;quot;delims=&amp;quot; %%I in (&amp;quot;%~dp0..&amp;quot;) do @set git_install_root=%%~fI
@set PATH=%git_install_root%\bin;%git_install_root%\mingw\bin;%PATH%

@if not exist &amp;quot;%HOME%&amp;quot; @set HOME=%HOMEDRIVE%%HOMEPATH%
@if not exist &amp;quot;%HOME%&amp;quot; @set HOME=%USERPROFILE%

@curl.exe %*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And copy it to &lt;code&gt;C:\Program Files\Git\cmd\curl.cmd&lt;/code&gt;, assuming &lt;a href=&#34;http://code.google.com/p/msysgit&#34;&gt;msysgit&lt;/a&gt; was installed to &lt;code&gt;c:\Program Files\Git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to verify all good, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\&amp;gt; curl --version
curl 7.21.1 (i686-pc-mingw32) libcurl/7.21.1 OpenSSL/0.9.8k zlib/1.2.3
Protocols: dict file ftp ftps http https imap imaps ldap ldaps pop3 pop3s rtsp smtp smtps telnet tftp
Features: Largefile NTLM SSL SSPI libz
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;installing-spf13-vim-on-windows:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Installing spf13-vim on Windows&lt;/h4&gt;

&lt;p&gt;The easiest way is to download and run the spf13-vim-windows-install.cmd file. Remember to run this file in &lt;strong&gt;Administrator Mode&lt;/strong&gt; if you want the symlinks to be created successfully.&lt;/p&gt;

&lt;h2 id=&#34;updating-to-the-latest-version:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Updating to the latest version&lt;/h2&gt;

&lt;p&gt;The simpliest (and safest) way to update is to simply rerun the installer. It will completely and non destructively upgrade to the latest version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
    curl http://j.mp/spf13-vim3 -L -o - | sh

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively you can manually perform the following steps. If anything has changed with the structure of the configuration you will need to create the appropriate symlinks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    cd $HOME/to/spf13-vim/
    git pull
    vim +BundleInstall! +BundleClean +q
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fork-me-on-github:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Fork me on GitHub&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m always happy to take pull requests from others. A good number of people are already &lt;a href=&#34;https://github.com/spf13/spf13-vim/contributors&#34;&gt;contributors&lt;/a&gt; to &lt;a href=&#34;https://github.com/spf13/spf13-vim&#34;&gt;spf13-vim&lt;/a&gt;. Go ahead and fork me.&lt;/p&gt;

&lt;h1 id=&#34;a-highly-optimized-vimrc-config-file:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;A highly optimized .vimrc config file&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/kZWj1.png&#34; alt=&#34;spf13-vimrc image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The .vimrc file is suited to programming. It is extremely well organized and folds in sections.
Each section is labeled and each option is commented.&lt;/p&gt;

&lt;p&gt;It fixes many of the inconveniences of vanilla vim including&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A single config can be used across Windows, Mac and linux&lt;/li&gt;
&lt;li&gt;Eliminates swap and backup files from littering directories, preferring to store in a central location.&lt;/li&gt;
&lt;li&gt;Fixes common typos like :W, :Q, etc&lt;/li&gt;
&lt;li&gt;Setup a solid set of settings for Formatting (change to meet your needs)&lt;/li&gt;
&lt;li&gt;Setup the interface to take advantage of vim&amp;rsquo;s features including

&lt;ul&gt;
&lt;li&gt;omnicomplete&lt;/li&gt;
&lt;li&gt;line numbers&lt;/li&gt;
&lt;li&gt;syntax highlighting&lt;/li&gt;
&lt;li&gt;A better ruler &amp;amp; status line&lt;/li&gt;
&lt;li&gt;&amp;amp; more&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Configuring included plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;customization:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Customization&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;~/.vimrc.local&lt;/code&gt; and &lt;code&gt;~/.gvimrc.local&lt;/code&gt; for any local
customizations.&lt;/p&gt;

&lt;p&gt;For example, to override the default color schemes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    echo colorscheme ir_black  &amp;gt;&amp;gt; ~/.vimrc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fork-customization:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Fork Customization&lt;/h3&gt;

&lt;p&gt;There is an additional tier of customization available to those who want to maintain a
fork of spf13-vim specialized for a particular group. These users can create &lt;code&gt;.vimrc.fork&lt;/code&gt;
and &lt;code&gt;.vimrc.bundles.fork&lt;/code&gt; files in the root of their fork.  The load order for the configuration is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.vimrc.bundles.local&lt;/code&gt; - local user bundle configuration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vimrc.bundles.fork&lt;/code&gt; - fork bundle configuration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vimrc.bundles&lt;/code&gt; - spf13-vim bundle configuration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vimrc&lt;/code&gt; - spf13-vim vim configuration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vimrc.fork&lt;/code&gt; - fork vim configuration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vimrc.local&lt;/code&gt; - local user configuration&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;See &lt;code&gt;.vimrc.bundles&lt;/code&gt; for specifics on what options can be set to override bundle configuration. See &lt;code&gt;.vimrc&lt;/code&gt; for specifics
on what options can be overridden. Most vim configuration options should be set in your &lt;code&gt;.vimrc.fork&lt;/code&gt; file, bundle configuration
needs to be set in your &lt;code&gt;.vimrc.bundles.fork&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;You may also want to update your &lt;code&gt;README.markdown&lt;/code&gt; file so that the &lt;code&gt;bootstrap.sh&lt;/code&gt; link points to your repository and your &lt;code&gt;bootstrap.sh&lt;/code&gt;
file to pull down your fork.&lt;/p&gt;

&lt;p&gt;For an example of a fork of spf13-vim that provides customization in this manner see &lt;a href=&#34;https://github.com/taxilian/spf13-vim&#34;&gt;taxilian&amp;rsquo;s fork&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;plugins:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Plugins&lt;/h1&gt;

&lt;p&gt;spf13-vim contains a curated set of popular vim plugins, colors, snippets and syntaxes. Great care has been made to ensure that these plugins play well together and have optimal configuration.&lt;/p&gt;

&lt;h2 id=&#34;adding-new-plugins:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Adding new plugins&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;~/.vimrc.bundles.local&lt;/code&gt; for any additional bundles.&lt;/p&gt;

&lt;p&gt;To add a new bundle&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    echo Bundle \&#39;spf13/vim-colors\&#39; &amp;gt;&amp;gt; ~/.vimrc.bundles.local
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;removing-disabling-an-included-plugin:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Removing (disabling) an included plugin&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;~/.vimrc.local&lt;/code&gt; if it doesn&amp;rsquo;t already exist.&lt;/p&gt;

&lt;p&gt;Add the UnBundle command to this line. It takes the same input as the Bundle line, so simply copy the line you want to disable and add &amp;lsquo;Un&amp;rsquo; to the beginning.&lt;/p&gt;

&lt;p&gt;For example, disabling the &amp;lsquo;AutoClose&amp;rsquo; and &amp;lsquo;scrooloose/syntastic&amp;rsquo; plugins&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    echo UnBundle \&#39;AutoClose\&#39; &amp;gt;&amp;gt; ~/.vimrc.local
    echo UnBundle \&#39;scrooloose/syntastic\&#39; &amp;gt;&amp;gt; ~/.vimrc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Remember to run &amp;lsquo;:BundleClean!&amp;rsquo; after this to remove the existing directories&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are a few of the plugins:&lt;/p&gt;

&lt;h2 id=&#34;undotree:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;&lt;a href=&#34;https://github.com/mbbill/undotree&#34;&gt;Undotree&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;If you undo changes and then make a new change, in most editors the changes you undid are gone forever, as their undo-history is a simple list.
Since version 7.0 vim uses an undo-tree instead. If you make a new change after undoing changes, a new branch is created in that tree.
Combined with persistent undo, this is nearly as flexible and safe as git ;-)&lt;/p&gt;

&lt;p&gt;Undotree makes that feature more accessible by creating a visual representation of said undo-tree.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QuickStart&lt;/strong&gt; Launch using &lt;code&gt;&amp;lt;Leader&amp;gt;u&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;nerdtree:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;&lt;a href=&#34;http://github.com/scrooloose/nerdtree&#34;&gt;NERDTree&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;NERDTree is a file explorer plugin that provides &amp;ldquo;project drawer&amp;rdquo;
functionality to your vim editing.  You can learn more about it with
:help NERDTree.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QuickStart&lt;/strong&gt; Launch using &lt;code&gt;&amp;lt;Leader&amp;gt;e&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customizations&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;&amp;lt;C-E&amp;gt;&lt;/code&gt; to toggle NERDTree&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;&amp;lt;leader&amp;gt;e&lt;/code&gt; or &lt;code&gt;&amp;lt;leader&amp;gt;nt&lt;/code&gt; to load NERDTreeFind which opens NERDTree where the current file is located.&lt;/li&gt;
&lt;li&gt;Hide clutter (&amp;rsquo;.pyc&amp;rsquo;, &amp;lsquo;.git&amp;rsquo;, &amp;lsquo;.hg&amp;rsquo;, &amp;lsquo;.svn&amp;rsquo;, &amp;lsquo;.bzr&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;Treat NERDTree more like a panel than a split.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ctrlp:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;&lt;a href=&#34;http://github.com/kien/ctrlp.vim&#34;&gt;ctrlp&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Ctrlp replaces the Command-T plugin with a 100% viml plugin. It provides an intuitive and fast mechanism to load files from the file system (with regex and fuzzy find), from open buffers, and from recently used files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QuickStart&lt;/strong&gt; Launch using &lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;surround:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;&lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;Surround&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This plugin is a tool for dealing with pairs of &amp;ldquo;surroundings.&amp;rdquo;  Examples
of surroundings include parentheses, quotes, and HTML tags.  They are
closely related to what Vim refers to as text-objects.  Provided
are mappings to allow for removing, changing, and adding surroundings.&lt;/p&gt;

&lt;p&gt;Details follow on the exact semantics, but first, consider the following
examples.  An asterisk (*) is used to denote the cursor position.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Old text                  Command     New text ~
  &amp;quot;Hello *world!&amp;quot;           ds&amp;quot;         Hello world!
  [123+4*56]/2              cs])        (123+456)/2
  &amp;quot;Look ma, I&#39;m *HTML!&amp;quot;     cs&amp;quot;&amp;lt;q&amp;gt;      &amp;lt;q&amp;gt;Look ma, I&#39;m HTML!&amp;lt;/q&amp;gt;
  if *x&amp;gt;3 {                 ysW(        if ( x&amp;gt;3 ) {
  my $str = *whee!;         vlllls&#39;     my $str = &#39;whee!&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For instance, if the cursor was inside &lt;code&gt;&amp;quot;foo bar&amp;quot;&lt;/code&gt;, you could type
&lt;code&gt;cs&amp;quot;&#39;&lt;/code&gt; to convert the text to &lt;code&gt;&#39;foo bar&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot more, check it out at &lt;code&gt;:help surround&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;nerdcommenter:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;&lt;a href=&#34;http://github.com/scrooloose/nerdcommenter&#34;&gt;NERDCommenter&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;NERDCommenter allows you to wrangle your code comments, regardless of
filetype. View &lt;code&gt;help :NERDCommenter&lt;/code&gt; or checkout my post on &lt;a href=&#34;http://spf13.com/post/vim-plugins-nerd-commenter&#34;&gt;NERDCommenter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QuickStart&lt;/strong&gt; Toggle comments using &lt;code&gt;&amp;lt;Leader&amp;gt;c&amp;lt;space&amp;gt;&lt;/code&gt; in Visual or Normal mode.&lt;/p&gt;

&lt;h2 id=&#34;neocomplcache:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;&lt;a href=&#34;http://github.com/shougo/neocomplcache&#34;&gt;neocomplcache&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;NeoComplCache is an amazing autocomplete plugin with additional support for snippets. It can complete simulatiously from the dictionary, buffer, omnicomplete and snippets. This is the one true plugin that brings Vim autocomplete on par with the best editors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QuickStart&lt;/strong&gt; Just start typing, it will autocomplete where possible&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customizations&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automatically present the autocomplete menu&lt;/li&gt;
&lt;li&gt;Support tab and enter for autocomplete&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt; for completing snippets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/90Gg7.png&#34; alt=&#34;neocomplcache image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;syntastic:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;&lt;a href=&#34;http://github.com/scrooloose/syntastic&#34;&gt;Syntastic&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Syntastic is a syntax checking plugin that runs buffers through external syntax
checkers as they are saved and opened. If syntax errors are detected, the user
is notified and is happy because they didn&amp;rsquo;t have to compile their code or
execute their script to find them.&lt;/p&gt;

&lt;h2 id=&#34;autoclose:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;[AutoClose]&lt;/h2&gt;

&lt;p&gt;AutoClose does what you expect. It&amp;rsquo;s simple, if you open a bracket, paren, brace, quote,
etc, it automatically closes it. It handles curlys correctly and doesn&amp;rsquo;t get in the
way of double curlies for things like jinja and twig.&lt;/p&gt;

&lt;h2 id=&#34;fugitive:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;&lt;a href=&#34;http://github.com/tpope/vim-fugitive&#34;&gt;Fugitive&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Fugitive adds pervasive git support to git directories in vim. For more
information, use &lt;code&gt;:help fugitive&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;:Gstatus&lt;/code&gt; to view &lt;code&gt;git status&lt;/code&gt; and type &lt;code&gt;-&lt;/code&gt; on any file to stage or
unstage it. Type &lt;code&gt;p&lt;/code&gt; on a file to enter &lt;code&gt;git add -p&lt;/code&gt; and stage specific
hunks in the file.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;:Gdiff&lt;/code&gt; on an open file to see what changes have been made to that
file&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QuickStart&lt;/strong&gt; &lt;code&gt;&amp;lt;leader&amp;gt;gs&lt;/code&gt; to bring up git status&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customizations&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gs&lt;/code&gt; :Gstatus&lt;CR&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gd&lt;/code&gt; :Gdiff&lt;CR&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gc&lt;/code&gt; :Gcommit&lt;CR&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gb&lt;/code&gt; :Gblame&lt;CR&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gl&lt;/code&gt; :Glog&lt;CR&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gp&lt;/code&gt; :Git push&lt;CR&gt;&lt;/li&gt;
&lt;li&gt;:Git ___ will pass anything along to git.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/4NrxV.png&#34; alt=&#34;fugitive image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;piv:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;&lt;a href=&#34;http://github.com/spf13/PIV&#34;&gt;PIV&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The most feature complete and up to date PHP Integration for Vim with proper support for PHP 5.3+ including latest syntax, functions, better fold support, etc.&lt;/p&gt;

&lt;p&gt;PIV provides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP 5.3 support&lt;/li&gt;
&lt;li&gt;Auto generation of PHP Doc (,pd on (function, variable, class) definition line)&lt;/li&gt;
&lt;li&gt;Autocomplete of classes, functions, variables, constants and language keywords&lt;/li&gt;
&lt;li&gt;Better indenting&lt;/li&gt;
&lt;li&gt;Full PHP documentation manual (hit K on any function for full docs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/c0GGP.png&#34; alt=&#34;php vim itegration image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;ack-vim:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Ack.vim&lt;/h2&gt;

&lt;p&gt;Ack.vim uses ack to search inside the current directory for a pattern.
You can learn more about it with :help Ack&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QuickStart&lt;/strong&gt; :Ack&lt;/p&gt;

&lt;h2 id=&#34;tabularize:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;&lt;a href=&#34;http://github.com/godlygeek/tabular&#34;&gt;Tabularize&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Tabularize lets you align statements on their equal signs and other characters&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customizations&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;a= :Tabularize /=&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;a: :Tabularize /:&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;a:: :Tabularize /:\zs&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;a, :Tabularize /,&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;a&amp;lt;Bar&amp;gt; :Tabularize /&amp;lt;Bar&amp;gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tagbar:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;&lt;a href=&#34;http://github.com/majutsushi/tagbar&#34;&gt;Tagbar&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;spf13-vim includes the Tagbar plugin. This plugin requires exuberant-ctags and will automatically generate tags for your open files. It also provides a panel to navigate easily via tags&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QuickStart&lt;/strong&gt; &lt;code&gt;CTRL-]&lt;/code&gt; while the cursor is on a keyword (such as a function name) to jump to it&amp;rsquo;s definition.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customizations&lt;/strong&gt;: spf13-vim binds &lt;code&gt;&amp;lt;Leader&amp;gt;tt&lt;/code&gt; to toggle the tagbar panel&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/cjbrC.png&#34; alt=&#34;tagbar image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For full language support, run &lt;code&gt;brew install ctags&lt;/code&gt; to install
exuberant-ctags.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Check out &lt;code&gt;:help ctags&lt;/code&gt; for information about VIM&amp;rsquo;s built-in
ctag support. Tag navigation creates a stack which can traversed via
&lt;code&gt;Ctrl-]&lt;/code&gt; (to find the source of a token) and &lt;code&gt;Ctrl-T&lt;/code&gt; (to jump back up
one level).&lt;/p&gt;

&lt;h2 id=&#34;easymotion:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;&lt;a href=&#34;https://github.com/Lokaltog/vim-easymotion&#34;&gt;EasyMotion&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;EasyMotion provides an interactive way to use motions in Vim.&lt;/p&gt;

&lt;p&gt;It quickly maps each possible jump destination to a key allowing very fast and
straightforward movement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QuickStart&lt;/strong&gt; EasyMotion is triggered using the normal movements, but prefixing them with &lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For example this screen shot demonstrates pressing &lt;code&gt;,,w&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/ZsrVL.png&#34; alt=&#34;easymotion image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;additional-syntaxes:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Additional Syntaxes&lt;/h2&gt;

&lt;p&gt;spf13-vim ships with a few additional syntaxes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Markdown (bound to *.markdown, *.md, and *.mk)&lt;/li&gt;
&lt;li&gt;Twig&lt;/li&gt;
&lt;li&gt;Git commits (set your &lt;code&gt;EDITOR&lt;/code&gt; to &lt;code&gt;mvim -f&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;amazing-colors:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Amazing Colors&lt;/h2&gt;

&lt;p&gt;spf13-vim includes &lt;a href=&#34;http://github.com/altercation/vim-colors-solarized&#34;&gt;solarized&lt;/a&gt; and &lt;a href=&#34;https://github.com/spf13/vim-colors/&#34;&gt;spf13 vim color pack&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ir_black&lt;/li&gt;
&lt;li&gt;molokai&lt;/li&gt;
&lt;li&gt;peaksea&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use &lt;code&gt;:color molokai&lt;/code&gt; to switch to a color scheme.&lt;/p&gt;

&lt;p&gt;Terminal Vim users will benefit from solarizing their terminal emulators and setting solarized support to 16 colors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let g:solarized_termcolors=16
color solarized
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Terminal emulator colorschemes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ethanschoonover.com/solarized&#34;&gt;http://ethanschoonover.com/solarized&lt;/a&gt; (iTerm2, Terminal.app)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/phiggins/konsole-colors-solarized&#34;&gt;https://github.com/phiggins/konsole-colors-solarized&lt;/a&gt; (KDE Konsole)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sigurdga/gnome-terminal-colors-solarized&#34;&gt;https://github.com/sigurdga/gnome-terminal-colors-solarized&lt;/a&gt; (Gnome Terminal)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;snippets:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Snippets&lt;/h2&gt;

&lt;p&gt;It also contains a very complete set of &lt;a href=&#34;http://github.com/spf13/vim-snippets&#34;&gt;snippets&lt;/a&gt; for use with snipmate or &lt;a href=&#34;http://github.com/shougo/neocomplcache&#34;&gt;NeoComplCache&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;intro-to-vim:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Intro to VIM&lt;/h1&gt;

&lt;p&gt;Here&amp;rsquo;s some tips if you&amp;rsquo;ve never used VIM before:&lt;/p&gt;

&lt;h2 id=&#34;tutorials:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Tutorials&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Type &lt;code&gt;vimtutor&lt;/code&gt; into a shell to go through a brief interactive
tutorial inside VIM.&lt;/li&gt;
&lt;li&gt;Read the slides at &lt;a href=&#34;http://walking-without-crutches.heroku.com/#1&#34;&gt;VIM: Walking Without Crutches&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;modes:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Modes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;VIM has two (common) modes:

&lt;ul&gt;
&lt;li&gt;insert mode- stuff you type is added to the buffer&lt;/li&gt;
&lt;li&gt;normal mode- keys you hit are interpreted as commands&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;To enter insert mode, hit &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To exit insert mode, hit &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;useful-commands:846e4e2591b5afb7e79f94682ee91b32&#34;&gt;Useful commands&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;:q&lt;/code&gt; to exit vim&lt;/li&gt;
&lt;li&gt;Certain commands are prefixed with a &lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt; key, which by default maps to &lt;code&gt;\&lt;/code&gt;.
Spf13-vim uses &lt;code&gt;let mapleader = &amp;quot;,&amp;quot;&lt;/code&gt; to change this to &lt;code&gt;,&lt;/code&gt; which is in a consistent and
convenient location.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Keyboard &lt;a href=&#34;http://walking-without-crutches.heroku.com/image/images/vi-vim-cheat-sheet.png&#34;&gt;cheat sheet&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            __ _ _____              _
 ___ _ __  / _/ |___ /      __   __(_)_ __ ___
/ __| &#39;_ \| |_| | |_ \ _____\ \ / /| | &#39;_ ` _ \
\__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
|___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
    |_|
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Creating your own Symfony2 Bundle</title>
      <link>http://zhash.github.io/post/creating-your-own-symfony2-bundle</link>
      <pubDate>Tue, 24 May 2011 00:00:00 +0000</pubDate>
      
      <guid>http://zhash.github.io/post/creating-your-own-symfony2-bundle</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;http://zhash.github.io/media/symfony_ss.png&#34; alt=&#34;symfony&#34; /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;&lt;a href=&#34;http://symfony.com/&#34;&gt;Symfony2&lt;/a&gt; is a great web framework.
&lt;a href=&#34;https://opensky.com&#34;&gt;OpenSky&lt;/a&gt; is built on this framework and we are one
of the largest contributors to it. The primary building block for
Symfony2 is a bundle. Through it’s bundle system Symfony 2.0 achieves a
level of modularity I haven’t seen in other web frameworks. A bundle
permits a developer to add functionality to the framework and is the
best way to develop applications with Symfony2. In this post I’ll show
you how to create your own bundle.&lt;/p&gt;

&lt;h2 id=&#34;start-off-with-the-sandbox:b9c1d96372428c1d26afde598b5f3203&#34;&gt;Start off with the sandbox&lt;/h2&gt;

&lt;p&gt;First install symfony sandbox…&lt;/p&gt;

&lt;p&gt;the console can create a basic bundle for you.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; app/console init:bundle Spf13/SteveBundle

Initializing bundle &amp;quot;SteveBundle&amp;quot; in &amp;quot;Sites/sandbox/src/Spf13&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tell-symfony2-about-it:b9c1d96372428c1d26afde598b5f3203&#34;&gt;Tell Symfony2 about it&lt;/h2&gt;

&lt;p&gt;Just having the bundle in place isn’t enough, you need to tell Symfony2
it exists (and where).&lt;/p&gt;

&lt;p&gt;In your &lt;strong&gt;app/AppKernel.php&lt;/strong&gt; inside the \$bundles array in
the&lt;strong&gt;&lt;em&gt;registerBundle function&lt;/em&gt;&lt;/strong&gt; add the following line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    new Spf13\SteveBundle\SteveBundle(),
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;routing:b9c1d96372428c1d26afde598b5f3203&#34;&gt;Routing&lt;/h2&gt;

&lt;p&gt;You also need to define a route and tell Symfony2 where to find the
routing file. Of the 4 different formats available, I prefer yaml which
is the default in Symfony2.&lt;/p&gt;

&lt;p&gt;in &lt;strong&gt;app/config/routing.yml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steve:
    resource: @SteveBundle/Resources/config/routing.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create that &lt;strong&gt;routing.yml&lt;/strong&gt; file with the following contents.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; steve:
     pattern:  /steve
          defaults: { _controller: SteveBundle:Default:index }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-controller:b9c1d96372428c1d26afde598b5f3203&#34;&gt;The Controller&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;The init command has created a controller for you called DefaultController with a basic action (index) which renders a basic php template file.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now visit the page in a browser to confirm everything worked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://localhost/[webroot]/app_dev.php/steve&#34;&gt;http://localhost/[webroot]/app_dev.php/steve&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;and be greeted by your new bundle.&lt;/p&gt;

&lt;h3 id=&#34;related-posts:b9c1d96372428c1d26afde598b5f3203&#34;&gt;Related Posts&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://spf13.com/post/getting-started-with-symfony2/&#34;&gt;Getting Started with
Symfony2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spf13.com/post/symfony2/&#34;&gt;On Symfony2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spf13.com/post/creating-a-symfony2-console-command/&#34;&gt;Creating a Symfony2 Console
Command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spf13.com/post/next-gen-php-frameworks/&#34;&gt;Next Gen PHP
Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A new page for Google</title>
      <link>http://zhash.github.io/post/a-new-page-for-google</link>
      <pubDate>Fri, 21 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>http://zhash.github.io/post/a-new-page-for-google</guid>
      <description>
&lt;figure class=&#34;right half&#34;&gt;
    
        &lt;img src=&#34;http://zhash.github.io/media/sergey-brin-and-larry-page.jpg&#34; alt=&#34;Google Management&#34; /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;With a single tweet Google CEO Eric Schmidt announce a shift at the top
of the search giant. The timing of this announcement can’t help but call
to question if someone more youthful is needed at the helm to hold off
the tidal waves of Apple, Microsoft and Facebook.&lt;/p&gt;

&lt;p&gt;Odd that Google chose twitter and a blog post to convey this instead of
more traditional methods.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Day-to-day adult supervision no longer needed!” Schmidt wrote on his
Twitter account moments after Google dropped the bombshell that
upstaged its fourth-quarter earnings. Schmidt, 55, will still be
available to advise Page, 37, and Google’s other 37-year-old founder,
Sergey Brin, as the company’s executive chairman. &lt;em&gt;via
&lt;a href=&#34;http://www.msnbc.msn.com/id/41179589/ns/business-us_business/&#34;&gt;msnbc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Schmidt is referencing an interview with Charlie Rose on PBS from when
he first took the helm where Page and Brin explain why he took the role
as CEO.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Parental supervision, to be honest,” says Brin.&lt;/p&gt;

&lt;p&gt;Rose laughs hard, and asks Page, “Do you agree with that – you guys
need adult supervision?”&lt;/p&gt;

&lt;p&gt;Page: “I don’t know if I’d say need, but it’s really nice to have.”&lt;/p&gt;

&lt;p&gt;Rose: “It’s beneficial.”&lt;/p&gt;

&lt;p&gt;Page: “Yeah.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;via
&lt;a href=&#34;http://blogs.wsj.com/venturecapital/2011/01/20/about-eric-schmidts-adult-supervision-comment/&#34;&gt;WSJ&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eric Schmidt steps down just as  Mark Zuckerberg was named &lt;a href=&#34;http://www.blackweb20.com/2010/12/15/mark-zuckerberg-named-person-of-the-year-by-time/&#34;&gt;Person of
the Year by
Time&lt;/a&gt;and
Jobs was named &lt;a href=&#34;http://www.blackweb20.com/2010/12/24/steve-jobs-person-of-the-year-according-to-financial-times/&#34;&gt;Person of the Year by Financial
Times&lt;/a&gt;.
It calls to question if a more dynamic youthful leader was needed and if
Page can step up and be that.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;via&lt;a href=&#34;http://googleblog.blogspot.com/2011/01/update-from-chairman.html&#34;&gt;Google
Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On the New Yorker Ken Auletta sheds some light on &lt;a href=&#34;http://www.newyorker.com/online/blogs/newsdesk/2011/01/eric-schmidt-google.html&#34;&gt;why Eric Schmidt is
stepping down as Google’s
CEO&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Schmidt, according to associates, lost some energy and focus after
losing the China decision. At the same time, Google was becoming
defensive. All of their social-network efforts had faltered. Facebook
had replaced them as the hot tech company, the place vital engineers
wanted to work. Complaints about Google bureaucracy intensified.
Governments around the world were lobbing grenades at Google over
privacy, copyright, and size issues. The “don’t be evil” brand was
getting tarnished, and the founders were restive. Schmidt started to
think of departing. Nudged by a board-member friend and an outside
advisor that he had to re-energize himself, he decided after Labor Day
that he could reboot.&lt;/p&gt;

&lt;p&gt;He couldn’t. By the end of the year, he was ready to jump on his own.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apparently Facebook and youth had quite a bit to do with it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Backing up MySQL</title>
      <link>http://zhash.github.io/post/backing-up-mysql</link>
      <pubDate>Fri, 12 Dec 2008 00:00:00 +0000</pubDate>
      
      <guid>http://zhash.github.io/post/backing-up-mysql</guid>
      <description>


&lt;figure class=&#34;third right hid&#34;&gt;
    
        &lt;img src=&#34;http://zhash.github.io/media/MySQL.png&#34; alt=&#34;Image via Wikipedia&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Image via Wikipedia
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;p&gt;I don’t know very many people that haven’t been devastated by the loss
of data… Yet I am baffled that millions of professional IT workers still
ignore backing up their data. Since computers are great at doing
repetitive things
like &lt;a href=&#34;http://en.wikipedia.org/wiki/Backup&#34; title=&#34;Backup&#34;&gt;backups&lt;/a&gt;.. why not
spend 20 minutes setting up your machine to backup your files for you.
This guide will be specific to &lt;a href=&#34;http://www.mysql.com&#34; title=&#34;MySQL&#34;&gt;mysql&lt;/a&gt; to
create a local copy of the backup. Then read my other guide about
copying files securely to a remote backup server for the 2nd part.&lt;/p&gt;

&lt;p&gt;Hopefully you are using *nix. If so then you have some great utilities
already available to you.&lt;a href=&#34;http://rsync.samba.org/&#34; title=&#34;Rsync&#34;&gt;Rsync&lt;/a&gt;,
SSH, &lt;a href=&#34;http://en.wikipedia.org/wiki/Tar_%28band%29 &amp;quot;Tar (band&#34;&gt;Tar&lt;/a&gt;&amp;rdquo;),
Bash and Cron can produce elegant solutions.&lt;/p&gt;

&lt;h1 id=&#34;the-setup:6ca2d0ac2fb3a680d3e70a777f764e21&#34;&gt;The Setup&lt;/h1&gt;

&lt;h2 id=&#34;create-backup-user:6ca2d0ac2fb3a680d3e70a777f764e21&#34;&gt;Create Backup User&lt;/h2&gt;

&lt;p&gt;First thing to do is to create a &lt;strong&gt;Read Only&lt;/strong&gt; mysql user to perform the
backups. Optionally a second recovery user can also be created. It isn’t
advisable to perform backups as the root user as common sense and proper
procedures dictate that a user should always have the minimum privilages
necessary to accomplish the job.&lt;/p&gt;

&lt;p&gt;Example: Run the following command at the mysql prompt when logged in as
root to grant the minimal privilages needed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GRANT LOCK TABLES, SELECT, FILE, RELOAD, SUPER ON *.* TO &#39;db-backup&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;really-long.and Varied p@$$wrd&#39;;&lt;/code&gt;{.code}&lt;/p&gt;

&lt;h2 id=&#34;install-your-backup-script:6ca2d0ac2fb3a680d3e70a777f764e21&#34;&gt;Install Your Backup Script&lt;/h2&gt;

&lt;p&gt;There is a fantastic mysql backup script that is really easy to use and
simply wraps the mysql backup utilities with nice features like daily,
weekly, and monthly backups. Cycling and optionally emailing a summary
of the backup.&lt;/p&gt;

&lt;h3 id=&#34;download:6ca2d0ac2fb3a680d3e70a777f764e21&#34;&gt;Download&lt;/h3&gt;

&lt;p&gt;Go here to
download &lt;a href=&#34;http://sourceforge.net/projects/automysqlbackup/&#34;&gt;automysqlbackup&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;install:6ca2d0ac2fb3a680d3e70a777f764e21&#34;&gt;Install&lt;/h3&gt;

&lt;p&gt;Install it by copying it to a good location. I use /usr/local/sbin/ or
/usr/local/bin depending on if I am an admin on the system, or just a
user on a shared host.&lt;/p&gt;

&lt;p&gt;make sure to set the permissions as executable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# chmod +x automysqlbackup&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;configure:6ca2d0ac2fb3a680d3e70a777f764e21&#34;&gt;Configure&lt;/h3&gt;

&lt;p&gt;Simply edit the shell script with your favorite editor. If you don’t
have one, permit me to recommend VIM&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vim /usr/local/sbin/automysqlbackup.sh

#===================================================================== 
# Set the following variables to your system needs 
# (Detailed instructions below variables) 
#=====================================================================
# Username to access the MySQL server e.g. dbuser 
USERNAME=db-backup
# Username to access the MySQL server e.g. 
password PASSWORD=that-secure password set earlier
# Host name (or IP address) of MySQL server e.g localhost 
DBHOST=localhost
# List of DBNAMES for Daily/Weekly Backup e.g. &amp;quot;DB1 DB2 DB3&amp;quot; 
DBNAMES=&amp;quot;all&amp;quot; 
# OR NAME THEM WITH SPACES SEPARATING
# Backup directory location e.g /backups 
BACKUPDIR=&amp;quot;/usr/local/backup/mysql&amp;quot; 
# I LIKE THIS DIRECTORY, JUST MAKE SURE PERMISSIONS ARE SET PROPERLY
# Mail setup 
# What would you like to be mailed to you? 
# - log : send only log file 
# - files : send log file and sql files as attachments (see docs) 
# - stdout : will simply output the log to the screen if run manually. 
# - quiet : Only send logs if an error occurs to the MAILADDR. 
MAILCONTENT=&amp;quot;stdout&amp;quot;
# Set the maximum allowed email size in k. (4000 = approx 5MB email [see docs]) 
MAXATTSIZE=&amp;quot;4000&amp;quot;
# Email Address to send mail to? (
MAILADDR=&amp;quot;email@address.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setup-cron-to-run-nightly:6ca2d0ac2fb3a680d3e70a777f764e21&#34;&gt;Setup Cron to run nightly&lt;/h2&gt;

&lt;p&gt;create a new file in /etc/cron.daily/ and place these contents into it..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vim /etc/cron.daily/mysql-backup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;#!/bin/bash /usr/local/bin/automysqlbackup 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure it is executable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# chmod +x /etc/cron.daily/mysql-backup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I usually test it simply run that cron file from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# /etc/cron.daily/mysql-backup
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:6ca2d0ac2fb3a680d3e70a777f764e21&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Remember that a backup is only as good as it&amp;rsquo;s restore. What we have done here should be considered
the bare minimum and will result in some data loss if it&amp;rsquo;s needed.. How much data loss?
Up to one days worth of changes as that&amp;rsquo;s how frequently we are backing up things.
If we wanted to shrink that window then run the script more often, but recognize that cost for this
is the data retained will grow in size.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vba on Free Hacking</title>
    <link>http://zhash.github.io/topics/vba/</link>
    <description>Recent content in Vba on Free Hacking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016, Merty; all rights reserved.</copyright>
    <lastBuildDate>Mon, 28 Mar 2016 09:32:29 +0800</lastBuildDate>
    <atom:link href="http://zhash.github.io/topics/vba/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>embrace change with vba 03</title>
      <link>http://zhash.github.io/post/embrace-change-with-vba-03/</link>
      <pubDate>Mon, 28 Mar 2016 09:32:29 +0800</pubDate>
      
      <guid>http://zhash.github.io/post/embrace-change-with-vba-03/</guid>
      <description>&lt;p&gt;前两篇中我们都提到了DRY原则，在这篇中，我们正式提出一个口号：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;从今天起，面朝大海，春暖花开，旗帜鲜明全面推行单一职责原则！&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不管是类还是方法，单一职责的思想都有着重要的意义。&lt;/p&gt;

&lt;p&gt;我们这里讨论方法，对于方法我们尽量要能够用一句话来描述它的职责，它是干什么的。&lt;/p&gt;

&lt;p&gt;我们来看一下第二篇中类里提到的一个方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Function perimeter()
    For i = 1 To count
        perimeter = tall(i).length + tall(i).wide * 2
    Next
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个方法显然有两项职责：遍历传入的数据，并计算每一个长方形的类周长
什么叫类周长？——请看&lt;a href=&#34;http://zhash.github.io/post/embrace-change-with-vba-02/&#34;&gt;用VBA编写拥抱变化的代码(二)&lt;/a&gt;！&lt;/p&gt;

&lt;p&gt;我们根据单一职责原则把它分解为两个方法，这种重构肯定会带来额外的负
担，但对于性能如有必要，可在以后加以改善，现在最主要的是编写易于更
改的代码重构后的代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Function perimeters()
    For i = 1 To count
        perimeter tall(i)
    Next
End Function

Private Function perimeter(tall As Taller)
    perimeter = tall.length + tall.wide * 2
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将这种迭代动作分离出来，是一种常见的很容易识别出来的多职责情形。&lt;/p&gt;

&lt;p&gt;当然象上面这样简单的重构，其影响力是非常小的，但这种编码风格一旦形成，
累积起来对我们影响是非常巨大的。&lt;/p&gt;

&lt;p&gt;具有单一职责的方法的优点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使类高内聚，我们说类也应该是具有单一职责的，目的性强的，从哪里做起？就是从类中方法做起，每一个短小精悍的方法，对于类会起到一个净化的效果。&lt;/li&gt;
&lt;li&gt;替代注释，单一职责的方法可读性好，可以避免大量的注释，这些陈腐的注释，我已见过许多，都是陷阱。&lt;/li&gt;
&lt;li&gt;编码风格的传承，后续维护你代码的程序员会按照你的编码风格进行维护。&lt;/li&gt;
&lt;li&gt;最重要的一点，毫无疑问这种单一职责的方法是易于修改，更易于拥抱变化的。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>用VBA编写拥抱变化的代码(二)</title>
      <link>http://zhash.github.io/post/embrace-change-with-vba-02/</link>
      <pubDate>Fri, 25 Mar 2016 15:05:04 +0800</pubDate>
      
      <guid>http://zhash.github.io/post/embrace-change-with-vba-02/</guid>
      <description>&lt;p&gt;第一篇写了如何封装包裹传入的简单参数,小喽啰总是好解决的.
现在如果传入的是一个数组,我们应该如何处理？大部队来了……&lt;/p&gt;

&lt;p&gt;我们照样弄个长方体的类Cuboid&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Private ar

Function init(crr)
    ar = crr
End Function

Property Get arr()
    arr = ar
End Property

Function perimeter()   &#39;计算一个长与两个宽的和
    brr = arr
    For i = 1 To UBound(brr, 1)
        perimeter = brr(1, 1) + brr(i, 2) * 2
    Next
End Function
&#39;……其他大量索引该数组的方法
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;传入的参数是一系列长、宽的二维数组：arr = [{10,3;10,4;10,5}]&lt;/p&gt;

&lt;p&gt;按第一篇的思路,我们把传入的数组用一个方法包裹封装起来了.
但arr这个方法仅仅是返回了这个数组,而使用它的方法,必须
了解数据的哪一部分位于这个数组的哪一个索引位置上.&lt;/p&gt;

&lt;p&gt;方法perimeter不仅知道如何计算&lt;em&gt;类周长&lt;/em&gt;&amp;ndash;周长是2个长2个宽,而类周长是1个长
2个宽&amp;ndash;它还清楚的知道在数组的什么地方可以找到长与宽的数据.&lt;/p&gt;

&lt;p&gt;遍历数组时,长在第一个位置,宽在第二个位置,它依赖于数组的结构.
如果这个数组的结构变了,比如,长与宽的位置颠倒了,那么这个方法
就必须更改了,而其他引用该数组的方法也要进更改,这些方法是脆弱的.&lt;/p&gt;

&lt;p&gt;它们明修栈道,暗渡陈仓,表面上说投降我们了,可背后捅了我们一刀,暗箭难防啊.&lt;/p&gt;

&lt;p&gt;它们不符合DRY原则,长跟宽在哪个索引位置的信息不应该被多次复制,它们只应
该存在于一个地方,我们应该用一个方法把它们包裹起来.&lt;/p&gt;

&lt;p&gt;修改后的类如下所示：
    Private Type Taller
        length As Long
        wide As Long
    End Type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Private tall() As Taller
Private count

Function init(arr)
    tallify arr
End Function

Function perimeter()
    For i = 1 To count
        perimeter = tall(i).length + tall(i).wide * 2
    Next
End Function

Private Function tallify(arr) As Variant  &#39;包裹传进来的数组参数
    For i = 1 To UBound(arr, 1)
        ReDim Preserve tall(1 To i)
        tall(i).length = arr(i, 1)
        tall(i).wide = arr(i, 2)
    Next
    count = i - 1
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的这个perimeter方法对那个传入数组的内部结构一无所知,
它所知道的都是我们可以控制.tallify这个方法只包含少量的几
句代码,只有它能理解传入的数组参数,大部队敌人来了又怎样,我
们派一个小分队就解决了！&lt;/p&gt;

&lt;p&gt;这种样式的代码让你不会受到外部所属数据结构变化的影响,并且
还能提高代码的可读性（你说你不懂英文？咳咳,学学就懂了）,
同时它也更符合DRY原则.&lt;/p&gt;

&lt;p&gt;当然如果你能够控制输入,那么以上完全都不是必要的；如果你不
能确定,请将这种不确定的影响降到最低.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用VBA编写拥抱变化的代码(一)</title>
      <link>http://zhash.github.io/post/embrace-change-with-vba-01/</link>
      <pubDate>Fri, 25 Mar 2016 14:11:11 +0800</pubDate>
      
      <guid>http://zhash.github.io/post/embrace-change-with-vba-01/</guid>
      <description>

&lt;h1 id=&#34;embrace-change:e51d929b0160f65eb1da435a8f9e8108&#34;&gt;Embrace Change&lt;/h1&gt;

&lt;p&gt;毫无疑问,这样的标题出来,应该是基于类的,在个人认为基于模块的VBA代码,
就好象一个毫无基础的人,直接打开EXCEL在电子表格里乱图乱画一样(说这样
的话会不会被人拍砖？一家之言,不必当真哈),当然每个写VBA代码的人都是
这样过来的,我只在指出一条另外的路径供大家参考.同时唠叨一句,VBA的功
能还是很强大的,当然其性能有天然的缺点,但我们又不是用它来发射火箭,够用了.&lt;/p&gt;

&lt;p&gt;先看一个小例子:长方体的类Cuboid&lt;/p&gt;

&lt;p&gt;属性:底面积 高
    private are
    private hig&lt;/p&gt;

&lt;p&gt;方法:求体积与初始化方法
    Function volume()
        volume = are * hig
    End Function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Function init(area, high)
    are = area
    hig = high
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是一个小巧的类,但有一些隐患在其中,我们是认为体积等于底面积*高,
底面积是基于我们初始化传入的参数,然后这参数在我们的类中被肆意的到处引用,
当然这个类只是举例,所以简化了这面积参数只用来求体积.&lt;/p&gt;

&lt;p&gt;如果这个类中有一个长的属性,
从而有一个用面积参数来求宽的方法,基于此还有一个求周长的方法,甚至被引用到其他的类中作为接口&amp;hellip;&lt;/p&gt;

&lt;p&gt;可以想象如果我们传入的参数不是一个面积的概念,会怎样？
所有基于它的方法都会出错,需要重新修改,因此它需要一个&lt;em&gt;约束&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;要依赖行为,不依赖数据&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;每一个细小的行为都只能存在于一个地方,“避免重复”(DRY),OO中的这一说法是对这一思想的简捷描述.
类包含数据与行为,数据可以是任何内容(包括简单的字符串或数值或者复杂的数组),
访问类的数据有两种方法:直接引用或者将其包裹在访问器方法里.&lt;/p&gt;

&lt;p&gt;我们应该总是将其包裹在访问器方法里,而不是直接引用这些变量,具体如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Private are
Private hig

Property Get area()
    area = are
End Property

Property Get high()
    high = hig
End Property

Function volume()
    volume = area * high   &#39;这里用了访问器的方法,而不是直接引用类数据变量
End Function

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在访问器area方法便是这段代码里唯一可以理解are含义的地方,
实现此方法之后,are则由被四处引用的数据变成了只被定义了一次的行为,
如果传入的面积参数需要进行加工时,只要在访问器中加工一次就解决了.&lt;/p&gt;

&lt;p&gt;这种处理方法当然也会有其他的一些新问题,但不管怎样,你都应该将数据隐藏起来,
这种做法能保护代码避免它们受到意想不到的变化的影响,外部数据很常情况下不是
我们能控制的.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>设计模式在Excel VBA 类中的基础应用</title>
      <link>http://zhash.github.io/post/vba-design-pattern/</link>
      <pubDate>Thu, 24 Mar 2016 15:43:28 +0800</pubDate>
      
      <guid>http://zhash.github.io/post/vba-design-pattern/</guid>
      <description>

&lt;h1 id=&#34;design-pattern-vba:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Design Pattern VBA&lt;/h1&gt;

&lt;p&gt;跟很多玩VBA朋友一样,对于VBA的类一直摸不着头脑,觉得它的应用貌似不如想象中的强大,
直到阅读了《设计模式》的相关书籍后,才有一点心得,分享如下,当然设计模式的思想概念
什么的不会再本文中展开叙述的. 同时关于VBA类的基础知识,这边也不赘述了,相关资料也
有许多. 看书的直接后果导致个人目前认为:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;技术到最后,褪去华丽的技巧,剩下能闪烁的还是思想.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;scene:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Scene&lt;/h2&gt;

&lt;p&gt;个人在实际工作中运用最多的场景是:打开一个数据源,取出相关数据,根据不同的需求加工
整理后输出.针对上面的场景,我们来进行相关的设计,至于里面用到了哪种或哪些设计模式
大家有兴趣可以自行研究. 这里并非卖关子,只是想抛砖引玉,让大家保持好奇心,去深入了
解设计模式.&lt;/p&gt;

&lt;p&gt;如果强行说要去弄类的各种属性,也只不过是把数据源中的各个标题字段搞一遍而已,貌似是
画蛇添足, 所以我一般不搞,直接就是上类的方法.&lt;/p&gt;

&lt;h2 id=&#34;datesource:3482b2326563ae3120c25165b1c2f20a&#34;&gt;DateSource&lt;/h2&gt;

&lt;p&gt;数据源的类型包括文本文件、excel文件、各种数据库(Access,Oracle,SqlServer&amp;hellip;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;需要一个Open的方法来打开数据源,假定数据源是excel文件,OpenWorkBook()&lt;/li&gt;
&lt;li&gt;数据源有时不只一个excel文件而是一批,需要一个数组存放数据源的名称,FileArray()&lt;/li&gt;
&lt;li&gt;数据源需要一个存放路径,所以定义一个方法叫FolderPath()&lt;/li&gt;
&lt;li&gt;打开数据源取完数后,我们要关闭数据源,CloseWorkbook()&lt;/li&gt;
&lt;li&gt;通常还会定义一个方法用来释放程序过程中用到的对象FreeObj()&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;interface:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Interface&lt;/h2&gt;

&lt;p&gt;根据以上的描述一个通用接口类的方法,基本上就都出来了,汇总如下:&lt;/p&gt;

&lt;h3 id=&#34;inormal:3482b2326563ae3120c25165b1c2f20a&#34;&gt;INormal&lt;/h3&gt;

&lt;p&gt;接口类的名称为:INormal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Public Function OpenWorkbook()
End Function

Public Function FileArray()
End Function

Public Function CloseWorkbook()
End Function

Public Function FreeObj()
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上有几点需要注意一下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;接口类的名称遵循惯例以I打头&lt;/li&gt;
&lt;li&gt;接口中涉及的方法名称不要有下划线&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;据我的经验,如果接口方法名称中带下划线的话,在实现类中VBE不容易自动生成相关的实现方法名称
（这一点纯属个人经验,未经官方证实）.&lt;/p&gt;

&lt;h3 id=&#34;ichange:3482b2326563ae3120c25165b1c2f20a&#34;&gt;IChange&lt;/h3&gt;

&lt;p&gt;INormal是打底的,还会需要另一个接口类,
这个接口类名称为IChange,具体包含以下方法:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;打开数据源后,要取得相关的源数据,需要一个方法GetSource()&lt;/li&gt;
&lt;li&gt;这些源数据取得后,要进行加工整理,定义一个方法TransSource()&lt;/li&gt;
&lt;li&gt;加工整理完以后,要进行输出,所以定义一个方法FillSource()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;整理如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Public Function GetSource()
End Function

Public Function TransSource(Optional arr As Variant)
End Function

Public Function FillSource(Optional arr As Variant)
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此两个接口类已设置完成&lt;/p&gt;

&lt;h2 id=&#34;object:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Object&lt;/h2&gt;

&lt;p&gt;现在来看实现类&lt;/p&gt;

&lt;h3 id=&#34;company:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Company&lt;/h3&gt;

&lt;p&gt;先建一个实现类,名称为Company,引用上面的两个接口&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Implements INormal
Implements IChange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先实现接口类INormal的方法:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Private Function INormal_OpenWorkbook()
End Function

Private Function INormal_FolderPath()
End Function

Private Function INormal_FileArray()
End Function

Private Function INormal_CloseWorkbook()
End Function

Private Function INormal_FreeObj()
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再实现IChange接口类的方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Private Function IChange_GetSource() As Variant
    dim arr:dim brr()
    INormal_FolderPath
    arr = INormal_FileArray
    If IsArray(arr) Then
        For i = 0 To UBound(arr)
            INormal_OpenWorkbook arr(i)
            ...
            INormal_CloseWorkbook
        Next
        Erase arr
    End If
    IChange_GetSource = brr
End Function

Private Function IChange_TransSource( Optional arr As Variant )

Private Function IChange_FillSource(Optional arr As Variant)
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更经常的我会把类的构造函数与析构函数利用起来&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Private Sub Class_Initialize()
    ...
End Sub

Private Sub Class_Terminate()
    INormal_FreeObj
    ...
End Sub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然上面这些实现类的中所涉及的具体方法,都需要根据具体情况自行编程,上面都只是一个框架.&lt;/p&gt;

&lt;p&gt;这个Company类是针对一个需求搞出来的.&lt;/p&gt;

&lt;h3 id=&#34;salary:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Salary&lt;/h3&gt;

&lt;p&gt;现在我们再根据另外一个需求再新增一个实现类Salary&lt;/p&gt;

&lt;p&gt;数据源跟前面的类一样,但加工过程、输出要求等不一样&lt;/p&gt;

&lt;p&gt;Salary类的相关方法与Company类似,当然具体实现细节是不一样的,但都是继承前面的两个接口,方法名称都一样.&lt;/p&gt;

&lt;p&gt;至此我们搭积木盖房子所需要的积木基本上就搞出来了,人家说巧妇难为无米之炊,这米得先备着.&lt;/p&gt;

&lt;p&gt;开始煮菜:热锅、放油&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;organization-code:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Organization code&lt;/h2&gt;

&lt;p&gt;新建一模块（不是类模块）,命名为:Pro&lt;/p&gt;

&lt;p&gt;声明一接口类的对象类: Public clsIChange As IChange&lt;/p&gt;

&lt;h3 id=&#34;getclass:3482b2326563ae3120c25165b1c2f20a&#34;&gt;getClass&lt;/h3&gt;

&lt;p&gt;首先我们要知道程序需要哪个实现类,所以我们在该模块中定义一个函数getClass,
通常我们需要一个标志来区分,这边我以当前工作表的名称来区分所用的实现类
（现实工作中经常这样,在一个工作簿中,给需求方发不同的表）.
具体如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Function getClass() As Variant
    Select Case ActiveSheet.Name
        Case &amp;quot;Comp&amp;quot;
            Set clsIChange = New Company
        Case &amp;quot;Sala&amp;quot;
            Set clsIChange = New Salary
    End Select
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是可扩展的,如果还有其他表及对应的其他实现类,只需要增加Case即可.&lt;/p&gt;

&lt;h3 id=&#34;getclasslist:3482b2326563ae3120c25165b1c2f20a&#34;&gt;getClassList&lt;/h3&gt;

&lt;p&gt;接着定义一个函数进行类数据的取数加工输出:
    Function getClassList() As Variant
        Dim arr, brr
        With clsIChange
            arr = .GetSource
            brr = .TransSource(arr)
            .FillSource brr
        End With
        If IsArray(arr) Then Erase arr
        If IsArray(brr) Then Erase brr
    End Function&lt;/p&gt;

&lt;p&gt;以上我是为了调试哪个步骤出错多分了几步,调试正常或稳定的函数可以更简短如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Function getClassList() As Variant
    With clsIChange
        .FillSource .TransSource(.GetSource)
    End With
End Function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但个人不赞成这么做,因为需求不停在变,说不定哪天你又要开始调试了.
当然我应该倡导有问题要输出详细的文档来处理,但单步调试通常对于我
们来说是比较能掌握的实用方法.&lt;/p&gt;

&lt;p&gt;基本上菜做完了,要出锅了&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;result:3482b2326563ae3120c25165b1c2f20a&#34;&gt;Result&lt;/h2&gt;

&lt;p&gt;我们定义一个main过程&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sub main()
    getClass
    getClassList
End Sub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后用一个控件关联main即可,这个控件可以用加载宏搞到菜单栏中,
这样在不同的工作表中点击它就可以取得不同数据结果了.&lt;/p&gt;

&lt;p&gt;PS:我通常不是要关联控件的过程,都写为函数以Function打头,
而不管它到底是否需要返回值,这是因为以前有过经历,
当要关联控件宏时,如果都是Sub,会出来一堆的列表,不容易选.&lt;/p&gt;

&lt;p&gt;至此已经是讲完了,可能主要玩Excel VBA的朋友还没体会出它的好用之处,简单提示几点:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;编程最烦的是什么?需求的变更!一个笑话是要折磨一个程序员最好的方法是:
不断的变更需求.&lt;/li&gt;
&lt;li&gt;需求变更后,我们需要调整代码,但调整的代码是否会影响其他未调整的部分?
是否会引进新的bug?这些我们都不敢保证.但以上基于设计模式的框架在很大
程度上避免了这些问题,比如现在Comp表的数据加工需求变了,这时我们只要调
整Company类的TransSource方法即可,而不用担心它会影响到其他.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>